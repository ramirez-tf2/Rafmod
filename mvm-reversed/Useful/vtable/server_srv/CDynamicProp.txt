CDynamicProp

+0x0000:  00babf80  CDynamicProp::~CDynamicProp()
+0x0004:  00bac3c0  CDynamicProp::~CDynamicProp()
+0x0008:  009cfff0  CBaseEntity::SetRefEHandle(CBaseHandle const&)
+0x000c:  005fef90  CBaseEntity::GetRefEHandle() const
+0x0010:  005fef30  CBaseEntity::GetCollideable()
+0x0014:  005fef40  CBaseEntity::GetNetworkable()
+0x0018:  005fef50  CBaseEntity::GetBaseEntity()
+0x001c:  005fef80  CBaseEntity::GetModelIndex() const
+0x0020:  005fef60  CBaseEntity::GetModelName() const
+0x0024:  009e08a0  CBaseEntity::SetModelIndex(int)
+0x0028:  00b977f0  CDynamicProp::GetServerClass()
+0x002c:  00b97800  CDynamicProp::YouForgotToImplementOrDeclareServerClass()
+0x0030:  00b977e0  CDynamicProp::GetDataDescMap()
+0x0034:  009d3d10  CBaseEntity::SetModelIndexOverride(int, int)
+0x0038:  00b98d20  CDynamicProp::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
+0x003c:  009b85a0  CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
+0x0040:  009cfe80  CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
+0x0044:  0062e060  CBaseEntity::ShouldCollide(int, int) const
+0x0048:  009d3170  CBaseEntity::SetOwnerEntity(CBaseEntity*)
+0x004c:  009d6ac0  CBaseEntity::ShouldTransmit(CCheckTransmitInfo const*)
+0x0050:  009d69a0  CBaseEntity::UpdateTransmitState()
+0x0054:  009b1250  CBaseAnimating::SetTransmit(CCheckTransmitInfo*, bool)
+0x0058:  0062fca0  CBaseEntity::GetTracerType()
+0x005c:  00ba0f20  CDynamicProp::Spawn()
+0x0060:  00bab2c0  CBreakableProp::Precache()
+0x0064:  009badd0  CBaseAnimating::SetModel(char const*)
+0x0068:  009b66d0  CBaseAnimating::OnNewModel()
+0x006c:  009d1130  CBaseEntity::PostConstructor(char const*)
+0x0070:  009cf910  CBaseEntity::PostClientActive()
+0x0074:  0062d370  CBaseEntity::ParseMapData(CEntityMapData*)
+0x0078:  00b98ed0  CBaseProp::KeyValue(char const*, char const*)
+0x007c:  0062db80  CBaseEntity::KeyValue(char const*, float)
+0x0080:  0062dbe0  CBaseEntity::KeyValue(char const*, Vector const&)
+0x0084:  0062dc60  CBaseEntity::GetKeyValue(char const*, char*, int)
+0x0088:  00b98cb0  CBaseProp::Activate()
+0x008c:  00ba0300  CDynamicProp::SetParent(CBaseEntity*, int)
+0x0090:  009cf9a0  CBaseEntity::ObjectCaps()
+0x0094:  009d9860  CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
+0x0098:  009b4590  CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
+0x009c:  00b98ba0  CBaseProp::DrawDebugGeometryOverlays()
+0x00a0:  009b6d70  CBaseAnimating::DrawDebugTextOverlays()
+0x00a4:  009cfe00  CBaseEntity::Save(ISave&)
+0x00a8:  009b4500  CBaseAnimating::Restore(IRestore&)
+0x00ac:  009cfe40  CBaseEntity::ShouldSavePhysics()
+0x00b0:  009d9040  CBaseEntity::OnSave(IEntitySaveUtils*)
+0x00b4:  00ba0330  CDynamicProp::OnRestore()
+0x00b8:  005fe990  CBaseEntity::RequiredEdictIndex()
+0x00bc:  005fe9a0  CBaseEntity::MoveDone()
+0x00c0:  005fe9d0  CBaseEntity::Think()
+0x00c4:  005fea00  CBaseEntity::NetworkStateChanged_m_nNextThinkTick()
+0x00c8:  005fea10  CBaseEntity::NetworkStateChanged_m_nNextThinkTick(void*)
+0x00cc:  00629700  CBaseAnimating::GetBaseAnimating()
+0x00d0:  009cff80  CBaseEntity::GetResponseSystem()
+0x00d4:  009de960  CBaseEntity::DispatchResponse(char const*)
+0x00d8:  009cfd20  CBaseEntity::Classify()
+0x00dc:  005fea30  CBaseEntity::DeathNotice(CBaseEntity*)
+0x00e0:  005fea40  CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
+0x00e4:  0073d470  CBreakableProp::GetAutoAimRadius()
+0x00e8:  005fea60  CBaseEntity::GetAutoAimCenter()
+0x00ec:  0062f380  CBaseEntity::GetBeamTraceFilter()
+0x00f0:  009cfd70  CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
+0x00f4:  0062fb50  CBaseEntity::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
+0x00f8:  005feaa0  CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
+0x00fc:  00b9c350  CBreakableProp::OnTakeDamage(CTakeDamageInfo const&)
+0x0100:  005feab0  CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
+0x0104:  009d18d0  CBaseEntity::TakeHealth(float, int)
+0x0108:  0073d460  CBaseProp::IsAlive()
+0x010c:  00b9ff50  CBreakableProp::Event_Killed(CTakeDamageInfo const&)
+0x0110:  005feac0  CBaseEntity::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
+0x0114:  0062f730  CBaseEntity::BloodColor()
+0x0118:  005fead0  CBaseEntity::IsTriggered(CBaseEntity*)
+0x011c:  005feae0  CBaseEntity::IsNPC() const
+0x0120:  005feaf0  CBaseEntity::MyCombatCharacterPointer()
+0x0124:  005feb00  CBaseEntity::MyNextBotPointer()
+0x0128:  005feb10  CBaseEntity::GetDelay()
+0x012c:  009d1870  CBaseEntity::IsMoving()
+0x0130:  0062e540  CBaseEntity::DamageDecal(int, int)
+0x0134:  0062e0d0  CBaseEntity::DecalTrace(CGameTrace*, char const*)
+0x0138:  0062e1b0  CBaseEntity::ImpactTrace(CGameTrace*, int, char const*)
+0x013c:  005feb20  CBaseEntity::OnControls(CBaseEntity*)
+0x0140:  009d2040  CBaseEntity::HasTarget(string_t)
+0x0144:  005feb30  CBaseEntity::IsPlayer() const
+0x0148:  005feb40  CBaseEntity::IsNetClient() const
+0x014c:  005feb50  CBaseEntity::IsTemplate()
+0x0150:  005feb60  CBaseEntity::IsBaseObject() const
+0x0154:  005feb70  CBaseEntity::IsBaseTrain() const
+0x0158:  005feb80  CBaseEntity::IsCombatItem() const
+0x015c:  005feb90  CBaseEntity::IsBaseCombatWeapon() const
+0x0160:  005feba0  CBaseEntity::IsWearable() const
+0x0164:  005febb0  CBaseEntity::MyCombatWeaponPointer()
+0x0168:  005febc0  CBaseEntity::GetServerVehicle()
+0x016c:  009d1510  CBaseEntity::IsViewable()
+0x0170:  009d3560  CBaseEntity::ChangeTeam(int)
+0x0174:  009d1630  CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
+0x0178:  005ff0e0  CBaseEntity::CanStandOn(CBaseEntity*) const
+0x017c:  005febd0  CBaseEntity::CanStandOn(edict_t*) const
+0x0180:  005fec20  CBaseEntity::GetEnemy()
+0x0184:  005fec30  CBaseEntity::GetEnemy() const
+0x0188:  009d1570  CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
+0x018c:  009cfa70  CBaseEntity::StartTouch(CBaseEntity*)
+0x0190:  009cfac0  CBaseEntity::Touch(CBaseEntity*)
+0x0194:  009cfb50  CBaseEntity::EndTouch(CBaseEntity*)
+0x0198:  005fec40  CBaseEntity::StartBlocked(CBaseEntity*)
+0x019c:  009cfba0  CBaseEntity::Blocked(CBaseEntity*)
+0x01a0:  005fec50  CBaseEntity::EndBlocked()
+0x01a4:  006e29e0  CBaseEntity::PhysicsSimulate()
+0x01a8:  00b988b0  CDynamicProp::UpdateOnRemove()
+0x01ac:  005fec60  CBaseEntity::StopLoopingSounds()
+0x01b0:  009d0450  CBaseEntity::SUB_AllowedToFade()
+0x01b4:  009b3790  CBaseAnimating::Teleport(Vector const*, QAngle const*, Vector const*)
+0x01b8:  009cff50  CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
+0x01bc:  0062f5b0  CBaseEntity::MakeTracer(Vector const&, CGameTrace const&, int)
+0x01c0:  0062f6a0  CBaseEntity::GetTracerAttachment()
+0x01c4:  00630f20  CBaseEntity::FireBullets(FireBulletsInfo_t const&)
+0x01c8:  0062f410  CBaseEntity::DoImpactEffect(CGameTrace&, int)
+0x01cc:  005fec70  CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
+0x01d0:  005fec80  CBaseEntity::Respawn()
+0x01d4:  005fec90  CBaseEntity::IsLockedByMaster()
+0x01d8:  005feca0  CBaseEntity::GetMaxHealth() const
+0x01dc:  009b0dd0  CBaseAnimating::ModifyOrAppendCriteria(AI_CriteriaSet&)
+0x01e0:  005fecb0  CBaseEntity::NetworkStateChanged_m_iMaxHealth()
+0x01e4:  005fecc0  CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
+0x01e8:  005fecd0  CBaseEntity::NetworkStateChanged_m_iHealth()
+0x01ec:  005fece0  CBaseEntity::NetworkStateChanged_m_iHealth(void*)
+0x01f0:  005fecf0  CBaseEntity::NetworkStateChanged_m_lifeState()
+0x01f4:  005fed00  CBaseEntity::NetworkStateChanged_m_lifeState(void*)
+0x01f8:  005fed10  CBaseEntity::NetworkStateChanged_m_takedamage()
+0x01fc:  005fed20  CBaseEntity::NetworkStateChanged_m_takedamage(void*)
+0x0200:  009cff40  CBaseEntity::GetDamageType() const
+0x0204:  005fed30  CBaseEntity::GetDamage()
+0x0208:  005fed40  CBaseEntity::SetDamage(float)
+0x020c:  0062cb00  CBaseEntity::EyePosition()
+0x0210:  0062cb80  CBaseEntity::EyeAngles()
+0x0214:  0062cbb0  CBaseEntity::LocalEyeAngles()
+0x0218:  0062cbc0  CBaseEntity::EarPosition()
+0x021c:  009cf920  CBaseEntity::BodyTarget(Vector const&, bool)
+0x0220:  009cf960  CBaseEntity::HeadTarget(Vector const&)
+0x0224:  009d8d00  CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
+0x0228:  0062cc60  CBaseEntity::GetViewOffset() const
+0x022c:  0062cbf0  CBaseEntity::SetViewOffset(Vector const&)
+0x0230:  005fef00  CBaseEntity::GetSmoothedVelocity()
+0x0234:  009b5b80  CBaseAnimating::GetVelocity(Vector*, Vector*)
+0x0238:  009d3d90  CBaseEntity::FVisible(CBaseEntity*, int, CBaseEntity**)
+0x023c:  009d2610  CBaseEntity::FVisible(Vector const&, int, CBaseEntity**)
+0x0240:  005fed50  CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
+0x0244:  009d1090  CBaseEntity::GetAttackDamageScale(CBaseEntity*)
+0x0248:  009d0ff0  CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
+0x024c:  005fed60  CBaseEntity::GetGroundVelocityToApply(Vector&)
+0x0250:  005fed90  CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
+0x0254:  005feda0  CBaseEntity::Splash()
+0x0258:  0062cc70  CBaseEntity::WorldSpaceCenter() const
+0x025c:  009cfdc0  CBaseEntity::GetSoundEmissionOrigin() const
+0x0260:  0062fcb0  CBaseEntity::ModifyEmitSoundParams(EmitSound_t&)
+0x0264:  005fedb0  CBaseEntity::IsDeflectable()
+0x0268:  005fedc0  CBaseEntity::Deflected(CBaseEntity*, Vector&)
+0x026c:  00ba0500  CDynamicProp::CreateVPhysics()
+0x0270:  005fedd0  CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
+0x0274:  0062eba0  CBaseEntity::VPhysicsDestroyObject()
+0x0278:  00630b80  CBaseEntity::VPhysicsUpdate(IPhysicsObject*)
+0x027c:  009d14b0  CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
+0x0280:  009cfc30  CBaseEntity::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
+0x0284:  005fede0  CBaseEntity::VPhysicsShadowUpdate(IPhysicsObject*)
+0x0288:  009d0ec0  CBaseEntity::VPhysicsCollision(int, gamevcollisionevent_t*)
+0x028c:  009d0eb0  CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
+0x0290:  009d9430  CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
+0x0294:  009cfc40  CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
+0x0298:  009cfc70  CBaseEntity::VPhysicsIsFlesh()
+0x029c:  00b97760  CBreakableProp::HasPhysicsAttacker(float)
+0x02a0:  006e0020  CBaseEntity::PhysicsSolidMaskForEntity() const
+0x02a4:  006e0c60  CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
+0x02a8:  00b48790  CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
+0x02ac:  009b0c60  CBaseAnimating::GetStepOrigin() const
+0x02b0:  009b0ca0  CBaseAnimating::GetStepAngles() const
+0x02b4:  005fee00  CBaseEntity::ShouldDrawWaterImpacts()
+0x02b8:  005fee10  CBaseEntity::NetworkStateChanged_m_fFlags()
+0x02bc:  005fee20  CBaseEntity::NetworkStateChanged_m_fFlags(void*)
+0x02c0:  005fee30  CBaseEntity::NetworkStateChanged_m_nWaterLevel()
+0x02c4:  005fee40  CBaseEntity::NetworkStateChanged_m_nWaterLevel(void*)
+0x02c8:  005fee50  CBaseEntity::NetworkStateChanged_m_hGroundEntity()
+0x02cc:  005fee60  CBaseEntity::NetworkStateChanged_m_hGroundEntity(void*)
+0x02d0:  005fee70  CBaseEntity::NetworkStateChanged_m_vecBaseVelocity()
+0x02d4:  005fee80  CBaseEntity::NetworkStateChanged_m_vecBaseVelocity(void*)
+0x02d8:  005fee90  CBaseEntity::NetworkStateChanged_m_flFriction()
+0x02dc:  005feea0  CBaseEntity::NetworkStateChanged_m_flFriction(void*)
+0x02e0:  005feeb0  CBaseEntity::NetworkStateChanged_m_vecVelocity()
+0x02e4:  005feec0  CBaseEntity::NetworkStateChanged_m_vecVelocity(void*)
+0x02e8:  005feed0  CBaseEntity::NetworkStateChanged_m_vecViewOffset()
+0x02ec:  005feee0  CBaseEntity::NetworkStateChanged_m_vecViewOffset(void*)
+0x02f0:  005feef0  CBaseEntity::ShouldBlockNav() const
+0x02f4:  009b0c10  CBaseAnimating::GetIdealSpeed() const
+0x02f8:  009b0c20  CBaseAnimating::GetIdealAccel() const
+0x02fc:  009b7db0  CBaseAnimating::StudioFrameAdvance()
+0x0300:  009b1ee0  CBaseAnimating::SetSequence(int)
+0x0304:  00629710  CBaseAnimating::IsActivityFinished()
+0x0308:  009b34e0  CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
+0x030c:  00629720  CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
+0x0310:  009b1c70  CBaseAnimating::BecomeRagdollOnClient(Vector const&)
+0x0314:  009b0c00  CBaseAnimating::IsRagdoll()
+0x0318:  009b62f0  CBaseAnimating::CanBecomeRagdoll()
+0x031c:  009bab00  CBaseAnimating::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
+0x0320:  009b84d0  CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
+0x0324:  009b8f70  CBaseAnimating::SetupBones(matrix3x4_t*, int)
+0x0328:  009b1480  CBaseAnimating::CalculateIKLocks(float)
+0x032c:  009b6890  CBaseAnimating::DispatchAnimEvents(CBaseAnimating*)
+0x0330:  00b98a20  CDynamicProp::HandleAnimEvent(animevent_t*)
+0x0334:  009b0c50  CBaseAnimating::PopulatePoseParameters()
+0x0338:  009b4f10  CBaseAnimating::GetAttachment(int, matrix3x4_t&)
+0x033c:  009b8830  CBaseAnimating::InitBoneControllers()
+0x0340:  009b5e30  CBaseAnimating::GetGroundSpeedVelocity()
+0x0344:  009b1020  CBaseAnimating::RefreshCollisionBounds()
+0x0348:  00b99480  CBreakableProp::Ignite(float, bool, float, bool)
+0x034c:  009b0f60  CBaseAnimating::IgniteLifetime(float)
+0x0350:  009b0ea0  CBaseAnimating::IgniteNumHitboxFires(int)
+0x0354:  009b0de0  CBaseAnimating::IgniteHitboxFireScale(float)
+0x0358:  00629c20  CBaseAnimating::Extinguish()
+0x035c:  00629fc0  CBaseAnimating::SetLightingOriginRelative(CBaseEntity*)
+0x0360:  00629e00  CBaseAnimating::SetLightingOrigin(CBaseEntity*)
+0x0364:  00b98ea0  CDynamicProp::OverridePropdata()
+0x0368:  00b989e0  CBreakableProp::PlayPuntSound()
+0x036c:  00b988e0  CDynamicProp::GetRootPhysicsObjectForBreak()
+0x0370:  0073d490  CBreakableProp::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
+0x0374:  0073d4c0  CBreakableProp::PreferredCarryAngles()
+0x0378:  0073d500  CBreakableProp::SetDmgModBullet(float)
+0x037c:  0073d530  CBreakableProp::SetDmgModClub(float)
+0x0380:  0073d560  CBreakableProp::SetDmgModExplosive(float)
+0x0384:  0073d590  CBreakableProp::GetDmgModBullet()
+0x0388:  0073d5b0  CBreakableProp::GetDmgModClub()
+0x038c:  0073d5d0  CBreakableProp::GetDmgModExplosive()
+0x0390:  0073d5f0  CBreakableProp::SetExplosiveRadius(float)
+0x0394:  0073d620  CBreakableProp::SetExplosiveDamage(float)
+0x0398:  0073d650  CBreakableProp::GetExplosiveRadius()
+0x039c:  0073d670  CBreakableProp::GetExplosiveDamage()
+0x03a0:  0073d690  CBreakableProp::SetPhysicsDamageTable(string_t)
+0x03a4:  0073d6c0  CBreakableProp::GetPhysicsDamageTable()
+0x03a8:  0073d6f0  CBreakableProp::SetBreakableModel(string_t)
+0x03ac:  0073d720  CBreakableProp::GetBreakableModel()
+0x03b0:  0073d750  CBreakableProp::SetBreakableSkin(int)
+0x03b4:  0073d780  CBreakableProp::GetBreakableSkin()
+0x03b8:  0073d7a0  CBreakableProp::SetBreakableCount(int)
+0x03bc:  0073d7d0  CBreakableProp::GetBreakableCount()
+0x03c0:  0073d7f0  CBreakableProp::SetMaxBreakableSize(int)
+0x03c4:  0073d820  CBreakableProp::GetMaxBreakableSize()
+0x03c8:  0073dad0  CBreakableProp::SetPropDataBlocksLOS(bool)
+0x03cc:  0073daa0  CBreakableProp::SetPropDataIsAIWalkable(bool)
+0x03d0:  0073d840  CBreakableProp::SetBasePropData(string_t)
+0x03d4:  0073d870  CBreakableProp::GetBasePropData()
+0x03d8:  0073d8a0  CBreakableProp::SetInteraction(propdata_interactions_t)
+0x03dc:  0073d8d0  CBreakableProp::HasInteraction(propdata_interactions_t)
+0x03e0:  0073d900  CBreakableProp::SetMultiplayerBreakMode(mp_break_t)
+0x03e4:  0073d930  CBreakableProp::GetMultiplayerBreakMode() const
+0x03e8:  0073d950  CBreakableProp::SetPhysicsMode(int)
+0x03ec:  0073d970  CBreakableProp::GetPhysicsMode()
+0x03f0:  0073d980  CBreakableProp::OnBreak(Vector const&, Vector const&, CBaseEntity*)
+0x03f4:  00b9b700  CBreakableProp::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
+0x03f8:  00b9eb80  CBreakableProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
+0x03fc:  00b9e910  CBreakableProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
+0x0400:  00b98ff0  CBreakableProp::PhysGunLaunchAngularImpulse()
+0x0404:  00b98890  CDynamicProp::NotifyPositionChanged(CBaseEntity*)
+0x0408:  fffffb78  (unknown)
+0x040c:  011acba0  typeinfo for CDynamicProp
+0x0410:  0073d4f0  non-virtual thunk to CBreakableProp::SetDmgModBullet(float)
+0x0414:  0073d520  non-virtual thunk to CBreakableProp::SetDmgModClub(float)
+0x0418:  0073d550  non-virtual thunk to CBreakableProp::SetDmgModExplosive(float)
+0x041c:  0073d580  non-virtual thunk to CBreakableProp::GetDmgModBullet()
+0x0420:  0073d5a0  non-virtual thunk to CBreakableProp::GetDmgModClub()
+0x0424:  0073d5c0  non-virtual thunk to CBreakableProp::GetDmgModExplosive()
+0x0428:  0073d5e0  non-virtual thunk to CBreakableProp::SetExplosiveRadius(float)
+0x042c:  0073d610  non-virtual thunk to CBreakableProp::SetExplosiveDamage(float)
+0x0430:  0073d640  non-virtual thunk to CBreakableProp::GetExplosiveRadius()
+0x0434:  0073d660  non-virtual thunk to CBreakableProp::GetExplosiveDamage()
+0x0438:  0073d680  non-virtual thunk to CBreakableProp::SetPhysicsDamageTable(string_t)
+0x043c:  0073d6b0  non-virtual thunk to CBreakableProp::GetPhysicsDamageTable()
+0x0440:  0073d6e0  non-virtual thunk to CBreakableProp::SetBreakableModel(string_t)
+0x0444:  0073d710  non-virtual thunk to CBreakableProp::GetBreakableModel()
+0x0448:  0073d740  non-virtual thunk to CBreakableProp::SetBreakableSkin(int)
+0x044c:  0073d770  non-virtual thunk to CBreakableProp::GetBreakableSkin()
+0x0450:  0073d790  non-virtual thunk to CBreakableProp::SetBreakableCount(int)
+0x0454:  0073d7c0  non-virtual thunk to CBreakableProp::GetBreakableCount()
+0x0458:  0073d7e0  non-virtual thunk to CBreakableProp::SetMaxBreakableSize(int)
+0x045c:  0073d810  non-virtual thunk to CBreakableProp::GetMaxBreakableSize()
+0x0460:  0073dac0  non-virtual thunk to CBreakableProp::SetPropDataBlocksLOS(bool)
+0x0464:  0073da90  non-virtual thunk to CBreakableProp::SetPropDataIsAIWalkable(bool)
+0x0468:  0073d890  non-virtual thunk to CBreakableProp::SetInteraction(propdata_interactions_t)
+0x046c:  0073d8c0  non-virtual thunk to CBreakableProp::HasInteraction(propdata_interactions_t)
+0x0470:  0073d940  non-virtual thunk to CBreakableProp::SetPhysicsMode(int)
+0x0474:  0073d960  non-virtual thunk to CBreakableProp::GetPhysicsMode()
+0x0478:  0073d8f0  non-virtual thunk to CBreakableProp::SetMultiplayerBreakMode(mp_break_t)
+0x047c:  0073d920  non-virtual thunk to CBreakableProp::GetMultiplayerBreakMode() const
+0x0480:  0073d830  non-virtual thunk to CBreakableProp::SetBasePropData(string_t)
+0x0484:  0073d860  non-virtual thunk to CBreakableProp::GetBasePropData()
+0x0488:  fffffb74  (unknown)
+0x048c:  011acba0  typeinfo for CDynamicProp
+0x0490:  00b9b6f0  non-virtual thunk to CBreakableProp::OnAttemptPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
+0x0494:  00635d20  CDefaultPlayerPickupVPhysics::OnFailedPhysGunPickup(Vector)
+0x0498:  00b9eb70  non-virtual thunk to CBreakableProp::OnPhysGunPickup(CBasePlayer*, PhysGunPickup_t)
+0x049c:  00b9e900  non-virtual thunk to CBreakableProp::OnPhysGunDrop(CBasePlayer*, PhysGunDrop_t)
+0x04a0:  0073d480  non-virtual thunk to CBreakableProp::HasPreferredCarryAnglesForPlayer(CBasePlayer*)
+0x04a4:  0073d4b0  non-virtual thunk to CBreakableProp::PreferredCarryAngles()
+0x04a8:  00635d90  CDefaultPlayerPickupVPhysics::ForcePhysgunOpen(CBasePlayer*)
+0x04ac:  00b98fe0  non-virtual thunk to CBreakableProp::PhysGunLaunchAngularImpulse()
+0x04b0:  00635da0  CDefaultPlayerPickupVPhysics::ShouldPuntUseLaunchForces(PhysGunForce_t)
+0x04b4:  00635ed0  CDefaultPlayerPickupVPhysics::PhysGunLaunchVelocity(Vector const&, float)
+0x04b8:  fffffa30  (unknown)
+0x04bc:  011acba0  typeinfo for CDynamicProp
+0x04c0:  00babf70  non-virtual thunk to CDynamicProp::~CDynamicProp()
+0x04c4:  00bac3b0  non-virtual thunk to CDynamicProp::~CDynamicProp()
+0x04c8:  00b98880  non-virtual thunk to CDynamicProp::NotifyPositionChanged(CBaseEntity*)
