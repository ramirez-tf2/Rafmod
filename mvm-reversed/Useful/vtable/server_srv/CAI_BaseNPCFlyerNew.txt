CAI_BaseNPCFlyerNew

+0x0000:  00908a10  CAI_BaseNPCFlyerNew::~CAI_BaseNPCFlyerNew()
+0x0004:  00908a30  CAI_BaseNPCFlyerNew::~CAI_BaseNPCFlyerNew()
+0x0008:  009cfff0  CBaseEntity::SetRefEHandle(CBaseHandle const&)
+0x000c:  005fef90  CBaseEntity::GetRefEHandle() const
+0x0010:  005fef30  CBaseEntity::GetCollideable()
+0x0014:  005fef40  CBaseEntity::GetNetworkable()
+0x0018:  005fef50  CBaseEntity::GetBaseEntity()
+0x001c:  005fef80  CBaseEntity::GetModelIndex() const
+0x0020:  005fef60  CBaseEntity::GetModelName() const
+0x0024:  009e08a0  CBaseEntity::SetModelIndex(int)
+0x0028:  008e07f0  CAI_BaseNPC::GetServerClass()
+0x002c:  008e0800  CAI_BaseNPC::YouForgotToImplementOrDeclareServerClass()
+0x0030:  008e07e0  CAI_BaseNPC::GetDataDescMap()
+0x0034:  009d3d10  CBaseEntity::SetModelIndexOverride(int, int)
+0x0038:  009b1140  CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
+0x003c:  009b85a0  CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
+0x0040:  009cfe80  CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
+0x0044:  0062e060  CBaseEntity::ShouldCollide(int, int) const
+0x0048:  009d3170  CBaseEntity::SetOwnerEntity(CBaseEntity*)
+0x004c:  009d6ac0  CBaseEntity::ShouldTransmit(CCheckTransmitInfo const*)
+0x0050:  008e2d90  CAI_BaseNPC::UpdateTransmitState()
+0x0054:  009c0980  CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo*, bool)
+0x0058:  008e22d0  CAI_BaseNPC::GetTracerType()
+0x005c:  009bff90  CBaseCombatCharacter::Spawn()
+0x0060:  008e16c0  CAI_BaseNPC::Precache()
+0x0064:  009eccd0  CBaseFlex::SetModel(char const*)
+0x0068:  009b66d0  CBaseAnimating::OnNewModel()
+0x006c:  008e0ae0  CAI_BaseNPC::PostConstructor(char const*)
+0x0070:  009cf910  CBaseEntity::PostClientActive()
+0x0074:  0062d370  CBaseEntity::ParseMapData(CEntityMapData*)
+0x0078:  008e0b10  CAI_BaseNPC::KeyValue(char const*, char const*)
+0x007c:  0062db80  CBaseEntity::KeyValue(char const*, float)
+0x0080:  0062dbe0  CBaseEntity::KeyValue(char const*, Vector const&)
+0x0084:  0062dc60  CBaseEntity::GetKeyValue(char const*, char*, int)
+0x0088:  009060c0  CAI_BaseNPC::Activate()
+0x008c:  009db940  CBaseEntity::SetParent(CBaseEntity*, int)
+0x0090:  008dd6d0  CAI_BaseNPC::ObjectCaps()
+0x0094:  009d9860  CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
+0x0098:  009b4590  CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
+0x009c:  008e4a70  CAI_BaseNPC::DrawDebugGeometryOverlays()
+0x00a0:  00901cc0  CAI_BaseNPC::DrawDebugTextOverlays()
+0x00a4:  008f4dc0  CAI_BaseNPC::Save(ISave&)
+0x00a8:  008f6470  CAI_BaseNPC::Restore(IRestore&)
+0x00ac:  008dbe90  CAI_BaseNPC::ShouldSavePhysics()
+0x00b0:  009d9040  CBaseEntity::OnSave(IEntitySaveUtils*)
+0x00b4:  008f4ca0  CAI_BaseNPC::OnRestore()
+0x00b8:  005fe990  CBaseEntity::RequiredEdictIndex()
+0x00bc:  005fe9a0  CBaseEntity::MoveDone()
+0x00c0:  005fe9d0  CBaseEntity::Think()
+0x00c4:  005fea00  CBaseEntity::NetworkStateChanged_m_nNextThinkTick()
+0x00c8:  005fea10  CBaseEntity::NetworkStateChanged_m_nNextThinkTick(void*)
+0x00cc:  00629700  CBaseAnimating::GetBaseAnimating()
+0x00d0:  009cff80  CBaseEntity::GetResponseSystem()
+0x00d4:  009de960  CBaseEntity::DispatchResponse(char const*)
+0x00d8:  009cfd20  CBaseEntity::Classify()
+0x00dc:  005fea30  CBaseEntity::DeathNotice(CBaseEntity*)
+0x00e0:  005fea40  CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
+0x00e4:  009cfd30  CBaseEntity::GetAutoAimRadius()
+0x00e8:  008dc350  CAI_BaseNPC::GetAutoAimCenter()
+0x00ec:  0062f380  CBaseEntity::GetBeamTraceFilter()
+0x00f0:  008e28c0  CAI_BaseNPC::PassesDamageFilter(CTakeDamageInfo const&)
+0x00f4:  008e71e0  CAI_BaseNPC::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
+0x00f8:  005feaa0  CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
+0x00fc:  009c0270  CBaseCombatCharacter::OnTakeDamage(CTakeDamageInfo const&)
+0x0100:  005feab0  CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
+0x0104:  009c0540  CBaseCombatCharacter::TakeHealth(float, int)
+0x0108:  005fefa0  CBaseEntity::IsAlive()
+0x010c:  008f2550  CAI_BaseNPC::Event_Killed(CTakeDamageInfo const&)
+0x0110:  005feac0  CBaseEntity::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
+0x0114:  0061e830  CBaseCombatCharacter::BloodColor()
+0x0118:  005fead0  CBaseEntity::IsTriggered(CBaseEntity*)
+0x011c:  008dbeb0  CAI_BaseNPC::IsNPC() const
+0x0120:  007c9920  CBaseCombatCharacter::MyCombatCharacterPointer()
+0x0124:  005feb00  CBaseEntity::MyNextBotPointer()
+0x0128:  005feb10  CBaseEntity::GetDelay()
+0x012c:  009091a0  CAI_BaseNPC::IsMoving()
+0x0130:  0062e540  CBaseEntity::DamageDecal(int, int)
+0x0134:  008e0ba0  CAI_BaseNPC::DecalTrace(CGameTrace*, char const*)
+0x0138:  008e0bd0  CAI_BaseNPC::ImpactTrace(CGameTrace*, int, char const*)
+0x013c:  005feb20  CBaseEntity::OnControls(CBaseEntity*)
+0x0140:  009d2040  CBaseEntity::HasTarget(string_t)
+0x0144:  005feb30  CBaseEntity::IsPlayer() const
+0x0148:  005feb40  CBaseEntity::IsNetClient() const
+0x014c:  008e0930  CAI_BaseNPC::IsTemplate()
+0x0150:  005feb60  CBaseEntity::IsBaseObject() const
+0x0154:  005feb70  CBaseEntity::IsBaseTrain() const
+0x0158:  005feb80  CBaseEntity::IsCombatItem() const
+0x015c:  005feb90  CBaseEntity::IsBaseCombatWeapon() const
+0x0160:  005feba0  CBaseEntity::IsWearable() const
+0x0164:  005febb0  CBaseEntity::MyCombatWeaponPointer()
+0x0168:  005febc0  CBaseEntity::GetServerVehicle()
+0x016c:  009d1510  CBaseEntity::IsViewable()
+0x0170:  009c5cd0  CBaseCombatCharacter::ChangeTeam(int)
+0x0174:  009d1630  CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
+0x0178:  00909540  CAI_BaseNPC::CanStandOn(CBaseEntity*) const
+0x017c:  005febd0  CBaseEntity::CanStandOn(edict_t*) const
+0x0180:  008dbf50  CAI_BaseNPC::GetEnemy()
+0x0184:  008dbf90  CAI_BaseNPC::GetEnemy() const
+0x0188:  009d1570  CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
+0x018c:  008e0c10  CAI_BaseNPC::StartTouch(CBaseEntity*)
+0x0190:  009cfac0  CBaseEntity::Touch(CBaseEntity*)
+0x0194:  009cfb50  CBaseEntity::EndTouch(CBaseEntity*)
+0x0198:  005fec40  CBaseEntity::StartBlocked(CBaseEntity*)
+0x019c:  009cfba0  CBaseEntity::Blocked(CBaseEntity*)
+0x01a0:  005fec50  CBaseEntity::EndBlocked()
+0x01a4:  006e29e0  CBaseEntity::PhysicsSimulate()
+0x01a8:  008e1590  CAI_BaseNPC::UpdateOnRemove()
+0x01ac:  005fec60  CBaseEntity::StopLoopingSounds()
+0x01b0:  009d0450  CBaseEntity::SUB_AllowedToFade()
+0x01b4:  008f53b0  CAI_BaseNPC::Teleport(Vector const*, QAngle const*, Vector const*)
+0x01b8:  009cff50  CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
+0x01bc:  008e0d20  CAI_BaseNPC::MakeTracer(Vector const&, CGameTrace const&, int)
+0x01c0:  0062f6a0  CBaseEntity::GetTracerAttachment()
+0x01c4:  008e0c50  CAI_BaseNPC::FireBullets(FireBulletsInfo_t const&)
+0x01c8:  008e0cb0  CAI_BaseNPC::DoImpactEffect(CGameTrace&, int)
+0x01cc:  005fec70  CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
+0x01d0:  005fec80  CBaseEntity::Respawn()
+0x01d4:  005fec90  CBaseEntity::IsLockedByMaster()
+0x01d8:  005feca0  CBaseEntity::GetMaxHealth() const
+0x01dc:  008edc20  CAI_BaseNPC::ModifyOrAppendCriteria(AI_CriteriaSet&)
+0x01e0:  005fecb0  CBaseEntity::NetworkStateChanged_m_iMaxHealth()
+0x01e4:  005fecc0  CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
+0x01e8:  005fecd0  CBaseEntity::NetworkStateChanged_m_iHealth()
+0x01ec:  005fece0  CBaseEntity::NetworkStateChanged_m_iHealth(void*)
+0x01f0:  008de460  CAI_BaseNPC::NetworkStateChanged_m_lifeState()
+0x01f4:  008de840  CAI_BaseNPC::NetworkStateChanged_m_lifeState(void*)
+0x01f8:  005fed10  CBaseEntity::NetworkStateChanged_m_takedamage()
+0x01fc:  005fed20  CBaseEntity::NetworkStateChanged_m_takedamage(void*)
+0x0200:  009cff40  CBaseEntity::GetDamageType() const
+0x0204:  005fed30  CBaseEntity::GetDamage()
+0x0208:  005fed40  CBaseEntity::SetDamage(float)
+0x020c:  008e4600  CAI_BaseNPC::EyePosition()
+0x0210:  0062cb80  CBaseEntity::EyeAngles()
+0x0214:  0062cbb0  CBaseEntity::LocalEyeAngles()
+0x0218:  0062cbc0  CBaseEntity::EarPosition()
+0x021c:  008e3e60  CAI_BaseNPC::BodyTarget(Vector const&, bool)
+0x0220:  009cf960  CBaseEntity::HeadTarget(Vector const&)
+0x0224:  009d8d00  CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
+0x0228:  0062cc60  CBaseEntity::GetViewOffset() const
+0x022c:  0062cbf0  CBaseEntity::SetViewOffset(Vector const&)
+0x0230:  008e2860  CAI_BaseNPC::GetSmoothedVelocity()
+0x0234:  009b5b80  CBaseAnimating::GetVelocity(Vector*, Vector*)
+0x0238:  009c9310  CBaseCombatCharacter::FVisible(CBaseEntity*, int, CBaseEntity**)
+0x023c:  007c9c90  CBaseCombatCharacter::FVisible(Vector const&, int, CBaseEntity**)
+0x0240:  005fed50  CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
+0x0244:  009d1090  CBaseEntity::GetAttackDamageScale(CBaseEntity*)
+0x0248:  009d0ff0  CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
+0x024c:  005fed60  CBaseEntity::GetGroundVelocityToApply(Vector&)
+0x0250:  005fed90  CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
+0x0254:  005feda0  CBaseEntity::Splash()
+0x0258:  0062cc70  CBaseEntity::WorldSpaceCenter() const
+0x025c:  009cfdc0  CBaseEntity::GetSoundEmissionOrigin() const
+0x0260:  0062fcb0  CBaseEntity::ModifyEmitSoundParams(EmitSound_t&)
+0x0264:  005fedb0  CBaseEntity::IsDeflectable()
+0x0268:  005fedc0  CBaseEntity::Deflected(CBaseEntity*, Vector&)
+0x026c:  008ef330  CAI_BaseNPC::CreateVPhysics()
+0x0270:  005fedd0  CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
+0x0274:  0062eba0  CBaseEntity::VPhysicsDestroyObject()
+0x0278:  009c56c0  CBaseCombatCharacter::VPhysicsUpdate(IPhysicsObject*)
+0x027c:  009d14b0  CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
+0x0280:  009c3860  CBaseCombatCharacter::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
+0x0284:  005fede0  CBaseEntity::VPhysicsShadowUpdate(IPhysicsObject*)
+0x0288:  009d0ec0  CBaseEntity::VPhysicsCollision(int, gamevcollisionevent_t*)
+0x028c:  009d0eb0  CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
+0x0290:  009d9430  CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
+0x0294:  009cfc40  CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
+0x0298:  009cfc70  CBaseEntity::VPhysicsIsFlesh()
+0x029c:  005fedf0  CBaseEntity::HasPhysicsAttacker(float)
+0x02a0:  008e01e0  CAI_BaseNPC::PhysicsSolidMaskForEntity() const
+0x02a4:  006e0c60  CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
+0x02a8:  00b48790  CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
+0x02ac:  009b0c60  CBaseAnimating::GetStepOrigin() const
+0x02b0:  009b0ca0  CBaseAnimating::GetStepAngles() const
+0x02b4:  005fee00  CBaseEntity::ShouldDrawWaterImpacts()
+0x02b8:  005fee10  CBaseEntity::NetworkStateChanged_m_fFlags()
+0x02bc:  005fee20  CBaseEntity::NetworkStateChanged_m_fFlags(void*)
+0x02c0:  005fee30  CBaseEntity::NetworkStateChanged_m_nWaterLevel()
+0x02c4:  005fee40  CBaseEntity::NetworkStateChanged_m_nWaterLevel(void*)
+0x02c8:  005fee50  CBaseEntity::NetworkStateChanged_m_hGroundEntity()
+0x02cc:  005fee60  CBaseEntity::NetworkStateChanged_m_hGroundEntity(void*)
+0x02d0:  005fee70  CBaseEntity::NetworkStateChanged_m_vecBaseVelocity()
+0x02d4:  005fee80  CBaseEntity::NetworkStateChanged_m_vecBaseVelocity(void*)
+0x02d8:  005fee90  CBaseEntity::NetworkStateChanged_m_flFriction()
+0x02dc:  005feea0  CBaseEntity::NetworkStateChanged_m_flFriction(void*)
+0x02e0:  005feeb0  CBaseEntity::NetworkStateChanged_m_vecVelocity()
+0x02e4:  005feec0  CBaseEntity::NetworkStateChanged_m_vecVelocity(void*)
+0x02e8:  005feed0  CBaseEntity::NetworkStateChanged_m_vecViewOffset()
+0x02ec:  005feee0  CBaseEntity::NetworkStateChanged_m_vecViewOffset(void*)
+0x02f0:  005feef0  CBaseEntity::ShouldBlockNav() const
+0x02f4:  009087c0  CAI_BaseNPCFlyerNew::GetIdealSpeed() const
+0x02f8:  009b0c20  CBaseAnimating::GetIdealAccel() const
+0x02fc:  009bdcb0  CBaseAnimatingOverlay::StudioFrameAdvance()
+0x0300:  009b1ee0  CBaseAnimating::SetSequence(int)
+0x0304:  008e0470  CAI_BaseNPC::IsActivityFinished()
+0x0308:  009b34e0  CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
+0x030c:  00629720  CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
+0x0310:  009b1c70  CBaseAnimating::BecomeRagdollOnClient(Vector const&)
+0x0314:  009b0c00  CBaseAnimating::IsRagdoll()
+0x0318:  009b62f0  CBaseAnimating::CanBecomeRagdoll()
+0x031c:  009be160  CBaseAnimatingOverlay::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
+0x0320:  009b84d0  CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
+0x0324:  009b8f70  CBaseAnimating::SetupBones(matrix3x4_t*, int)
+0x0328:  009b1480  CBaseAnimating::CalculateIKLocks(float)
+0x032c:  009bcb60  CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating*)
+0x0330:  009042f0  CAI_BaseNPC::HandleAnimEvent(animevent_t*)
+0x0334:  008e6150  CAI_BaseNPC::PopulatePoseParameters()
+0x0338:  009b4f10  CBaseAnimating::GetAttachment(int, matrix3x4_t&)
+0x033c:  009b8830  CBaseAnimating::InitBoneControllers()
+0x0340:  009b5e30  CBaseAnimating::GetGroundSpeedVelocity()
+0x0344:  009b1020  CBaseAnimating::RefreshCollisionBounds()
+0x0348:  008e20d0  CAI_BaseNPC::Ignite(float, bool, float, bool)
+0x034c:  009b0f60  CBaseAnimating::IgniteLifetime(float)
+0x0350:  009b0ea0  CBaseAnimating::IgniteNumHitboxFires(int)
+0x0354:  009b0de0  CBaseAnimating::IgniteHitboxFireScale(float)
+0x0358:  00629c20  CBaseAnimating::Extinguish()
+0x035c:  009c2520  CBaseCombatCharacter::SetLightingOriginRelative(CBaseEntity*)
+0x0360:  00629e00  CBaseAnimating::SetLightingOrigin(CBaseEntity*)
+0x0364:  009ebdb0  CBaseFlex::SetViewtarget(Vector const&)
+0x0368:  009f0620  CBaseFlex::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
+0x036c:  009ece20  CBaseFlex::ProcessSceneEvents()
+0x0370:  009f3b50  CBaseFlex::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
+0x0374:  009eba10  CBaseFlex::ClearSceneEvent(CSceneEventInfo*, bool, bool)
+0x0378:  009ebc20  CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
+0x037c:  009eb9c0  CBaseFlex::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
+0x0380:  009eb990  CBaseFlex::PlayAutoGeneratedSoundScene(char const*)
+0x0384:  007c97d0  CBaseFlex::GetSpecialDSP()
+0x0388:  009bf7e0  CBaseCombatCharacter::GetPhysicsImpactDamageTable()
+0x038c:  009bf4a0  CBaseCombatCharacter::FInViewCone(CBaseEntity*)
+0x0390:  009bfb00  CBaseCombatCharacter::FInViewCone(Vector const&)
+0x0394:  009bf4e0  CBaseCombatCharacter::FInAimCone(CBaseEntity*)
+0x0398:  008e4070  CAI_BaseNPC::FInAimCone(Vector const&)
+0x039c:  009bf830  CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
+0x03a0:  009c1670  CBaseCombatCharacter::FindMissTarget()
+0x03a4:  008e14c0  CAI_BaseNPC::HandleInteraction(int, void*, CBaseCombatCharacter*)
+0x03a8:  009c0ce0  CBaseCombatCharacter::BodyAngles()
+0x03ac:  009bf9e0  CBaseCombatCharacter::BodyDirection2D()
+0x03b0:  009bfab0  CBaseCombatCharacter::BodyDirection3D()
+0x03b4:  008e19d0  CAI_BaseNPC::HeadDirection2D()
+0x03b8:  008e1450  CAI_BaseNPC::HeadDirection3D()
+0x03bc:  008e02e0  CAI_BaseNPC::EyeDirection2D()
+0x03c0:  008e0310  CAI_BaseNPC::EyeDirection3D()
+0x03c4:  009c1270  CBaseCombatCharacter::IsHiddenByFog(Vector const&) const
+0x03c8:  009c12e0  CBaseCombatCharacter::IsHiddenByFog(CBaseEntity*) const
+0x03cc:  009bf880  CBaseCombatCharacter::IsHiddenByFog(float) const
+0x03d0:  009c1200  CBaseCombatCharacter::GetFogObscuredRatio(Vector const&) const
+0x03d4:  009c1380  CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity*) const
+0x03d8:  009bf8b0  CBaseCombatCharacter::GetFogObscuredRatio(float) const
+0x03dc:  0061ea90  CBaseCombatCharacter::IsLookingTowards(CBaseEntity const*, float) const
+0x03e0:  0061eb70  CBaseCombatCharacter::IsLookingTowards(Vector const&, float) const
+0x03e4:  0061ec70  CBaseCombatCharacter::IsInFieldOfView(CBaseEntity*) const
+0x03e8:  0061ef60  CBaseCombatCharacter::IsInFieldOfView(Vector const&) const
+0x03ec:  0061f000  CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity*, CBaseCombatCharacter::LineOfSightCheckType) const
+0x03f0:  0061f0f0  CBaseCombatCharacter::IsLineOfSightClear(Vector const&, CBaseCombatCharacter::LineOfSightCheckType, CBaseEntity*) const
+0x03f4:  009c0150  CBaseCombatCharacter::GiveAmmo(int, int, bool)
+0x03f8:  0061e4c0  CBaseCombatCharacter::RemoveAmmo(int, int)
+0x03fc:  0061e570  CBaseCombatCharacter::RemoveAmmo(int, char const*)
+0x0400:  0061e6a0  CBaseCombatCharacter::GetAmmoCount(int) const
+0x0404:  008e1010  CAI_BaseNPC::NPC_TranslateActivity(Activity)
+0x0408:  009bf570  CBaseCombatCharacter::Weapon_TranslateActivity(Activity, bool*)
+0x040c:  009bf5f0  CBaseCombatCharacter::Weapon_FrameUpdate()
+0x0410:  009bf760  CBaseCombatCharacter::Weapon_HandleAnimEvent(animevent_t*)
+0x0414:  009bfbe0  CBaseCombatCharacter::Weapon_CanUse(CBaseCombatWeapon*)
+0x0418:  009c7b90  CBaseCombatCharacter::Weapon_Equip(CBaseCombatWeapon*)
+0x041c:  009c2fe0  CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon*)
+0x0420:  009c7110  CBaseCombatCharacter::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
+0x0424:  0061df70  CBaseCombatCharacter::Weapon_Switch(CBaseCombatWeapon*, int)
+0x0428:  008e46b0  CAI_BaseNPC::Weapon_ShootPosition()
+0x042c:  0061e280  CBaseCombatCharacter::Weapon_CanSwitchTo(CBaseCombatWeapon*)
+0x0430:  009bf660  CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon*)
+0x0434:  009bf6b0  CBaseCombatCharacter::Weapon_GetSlot(int) const
+0x0438:  007c98a0  CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon*)
+0x043c:  007c98b0  CBaseCombatCharacter::RemovePlayerItem(CBaseCombatWeapon*)
+0x0440:  007c98c0  CBaseCombatCharacter::CanBecomeServerRagdoll()
+0x0444:  008fd0c0  CAI_BaseNPC::OnTakeDamage_Alive(CTakeDamageInfo const&)
+0x0448:  008e3b40  CAI_BaseNPC::OnTakeDamage_Dying(CTakeDamageInfo const&)
+0x044c:  008e3bf0  CAI_BaseNPC::OnTakeDamage_Dead(CTakeDamageInfo const&)
+0x0450:  007c9ee0  CBaseCombatCharacter::GetAliveDuration() const
+0x0454:  008e42c0  CAI_BaseNPC::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
+0x0458:  008e4480  CAI_BaseNPC::NotifyFriendsOfDamage(CBaseEntity*)
+0x045c:  009bf8c0  CBaseCombatCharacter::HasEverBeenInjured(int) const
+0x0460:  009c1050  CBaseCombatCharacter::GetTimeSinceLastInjury(int) const
+0x0464:  007c98f0  CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity*, CTakeDamageInfo const&)
+0x0468:  009c3440  CBaseCombatCharacter::GetDeathActivity()
+0x046c:  009c0040  CBaseCombatCharacter::CorpseGib(CTakeDamageInfo const&)
+0x0470:  009c2c90  CBaseCombatCharacter::CorpseFade()
+0x0474:  009bf480  CBaseCombatCharacter::HasHumanGibs()
+0x0478:  009bf490  CBaseCombatCharacter::HasAlienGibs()
+0x047c:  007c9900  CBaseCombatCharacter::ShouldGib(CTakeDamageInfo const&)
+0x0480:  007c9910  CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
+0x0484:  008e2360  CAI_BaseNPC::Event_Gibbed(CTakeDamageInfo const&)
+0x0488:  009bf650  CBaseCombatCharacter::Event_Dying(CTakeDamageInfo const&)
+0x048c:  009bfc70  CBaseCombatCharacter::Event_Dying()
+0x0490:  009c1860  CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
+0x0494:  009c2720  CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity*)
+0x0498:  009bfcb0  CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity*, Vector const&, float, int)
+0x049c:  009c2310  CBaseCombatCharacter::CheckTraceHullAttack(float, Vector const&, Vector const&, int, int, float, bool)
+0x04a0:  009c1a20  CBaseCombatCharacter::CheckTraceHullAttack(Vector const&, Vector const&, Vector const&, Vector const&, int, int, float, bool)
+0x04a4:  007c9930  CBaseCombatCharacter::PushawayTouch(CBaseEntity*)
+0x04a8:  009c4db0  CBaseCombatCharacter::IRelationType(CBaseEntity*)
+0x04ac:  009c4d80  CBaseCombatCharacter::IRelationPriority(CBaseEntity*)
+0x04b0:  007c9940  CBaseCombatCharacter::IsInAVehicle() const
+0x04b4:  007c9950  CBaseCombatCharacter::GetVehicle()
+0x04b8:  007c9960  CBaseCombatCharacter::GetVehicleEntity()
+0x04bc:  007c9970  CBaseCombatCharacter::ExitVehicle()
+0x04c0:  009c6290  CBaseCombatCharacter::RemoveAllWeapons()
+0x04c4:  009bf820  CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon*)
+0x04c8:  009c00f0  CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
+0x04cc:  009bf7f0  CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon*, CBaseEntity*)
+0x04d0:  009bfa70  CBaseCombatCharacter::DoMuzzleFlash()
+0x04d4:  008e1ba0  CAI_BaseNPC::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
+0x04d8:  009c0d30  CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity*)
+0x04dc:  008e1b90  CAI_BaseNPC::AddClassRelationship(Class_T, Disposition_t, int)
+0x04e0:  008e1bb0  CAI_BaseNPC::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
+0x04e4:  007c9990  CBaseCombatCharacter::GetLastKnownArea() const
+0x04e8:  009bf990  CBaseCombatCharacter::IsAreaTraversable(CNavArea const*) const
+0x04ec:  009bf8f0  CBaseCombatCharacter::ClearLastKnownArea()
+0x04f0:  009c2060  CBaseCombatCharacter::UpdateLastKnownArea()
+0x04f4:  007c99a0  CBaseCombatCharacter::OnNavAreaChanged(CNavArea*, CNavArea*)
+0x04f8:  009c0010  CBaseCombatCharacter::OnNavAreaRemoved(CNavArea*)
+0x04fc:  007c99b0  CBaseCombatCharacter::OnPursuedBy(INextBot*)
+0x0500:  007c99c0  CBaseCombatCharacter::NetworkStateChanged_m_iAmmo()
+0x0504:  007c99d0  CBaseCombatCharacter::NetworkStateChanged_m_iAmmo(void*)
+0x0508:  00903770  CAI_BaseNPC::NPCInit()
+0x050c:  008dbea0  CAI_BaseNPC::PostNPCInit()
+0x0510:  008f2150  CAI_BaseNPC::StartNPC()
+0x0514:  008e5f40  CAI_BaseNPC::CleanupOnDeath(CBaseEntity*, bool)
+0x0518:  008e23f0  CAI_BaseNPC::CreateComponents()
+0x051c:  008e3130  CAI_BaseNPC::CreateSenses()
+0x0520:  008e33d0  CAI_BaseNPC::CreateMoveProbe()
+0x0524:  008e3440  CAI_BaseNPC::CreateMotor()
+0x0528:  008e3370  CAI_BaseNPC::CreateLocalNavigator()
+0x052c:  008e3310  CAI_BaseNPC::CreateNavigator()
+0x0530:  008e34a0  CAI_BaseNPC::CreatePathfinder()
+0x0534:  008e34f0  CAI_BaseNPC::CreateTacticalServices()
+0x0538:  008f7be0  CAI_BaseNPC::NPCThink()
+0x053c:  008ef9c0  CAI_BaseNPC::RunAI()
+0x0540:  008f8870  CAI_BaseNPC::GatherConditions()
+0x0544:  008e2730  CAI_BaseNPC::PrescheduleThink()
+0x0548:  008dbec0  CAI_BaseNPC::PostscheduleThink()
+0x054c:  008eb630  CAI_BaseNPC::OnScheduleChange()
+0x0550:  009061f0  CAI_BaseNPC::OnStartSchedule(int)
+0x0554:  00910fe0  CAI_BaseNPC::SelectSchedule()
+0x0558:  009111a0  CAI_BaseNPC::SelectFailSchedule(int, int, int)
+0x055c:  00941c80  CAI_BaseNPC::TranslateSchedule(int)
+0x0560:  009087e0  CAI_BaseNPCFlyerNew::StartTask(Task_t const*)
+0x0564:  009087d0  CAI_BaseNPCFlyerNew::RunTask(Task_t const*)
+0x0568:  009101f0  CAI_BaseNPC::IsInterruptable()
+0x056c:  008dbed0  CAI_BaseNPC::OnStartScene()
+0x0570:  008e2b20  CAI_BaseNPC::ShouldPlayerAvoid()
+0x0574:  008ec450  CAI_BaseNPC::SetPlayerAvoidState()
+0x0578:  008e6730  CAI_BaseNPC::PlayerPenetratingVPhysics()
+0x057c:  008e0340  CAI_BaseNPC::ShouldAlwaysThink()
+0x0580:  008f9c00  CAI_BaseNPC::LineOfSightDist(Vector const&, float)
+0x0584:  009040f0  CAI_BaseNPC::PostRunStopMoving()
+0x0588:  008dd7e0  CAI_BaseNPC::StartTask(Task_t*)
+0x058c:  008dd7b0  CAI_BaseNPC::RunTask(Task_t*)
+0x0590:  00941e30  CAI_BaseNPC::GetSchedule(int)
+0x0594:  008dd980  CAI_BaseNPC::GetLocalScheduleId(int)
+0x0598:  008dd9c0  CAI_BaseNPC::GetGlobalScheduleId(int)
+0x059c:  008f63c0  CAI_BaseNPC::TaskFail(int)
+0x05a0:  00941fc0  CAI_BaseNPC::TaskName(int)
+0x05a4:  008dd210  CAI_BaseNPC::GetLocalTaskId(int)
+0x05a8:  008dbee0  CAI_BaseNPC::GetSchedulingErrorName()
+0x05ac:  008e0840  CAI_BaseNPC::LoadedSchedules()
+0x05b0:  0090ae30  CAI_BaseNPC::BuildScheduleTestBits()
+0x05b4:  009110e0  CAI_BaseNPC::GetNewSchedule()
+0x05b8:  0090f880  CAI_BaseNPC::GetFailSchedule()
+0x05bc:  008e2310  CAI_BaseNPC::CanFlinch()
+0x05c0:  008eac90  CAI_BaseNPC::CheckFlinches()
+0x05c4:  00910430  CAI_BaseNPC::PlayFlinchGesture()
+0x05c8:  008e22a0  CAI_BaseNPC::IsAllowedToDodge()
+0x05cc:  00910320  CAI_BaseNPC::SelectDeadSchedule()
+0x05d0:  00906200  CAI_BaseNPC::GetRunningBehavior()
+0x05d4:  008dbef0  CAI_BaseNPC::ShouldAcceptGoal(CAI_BehaviorBase*, CAI_GoalEntity*)
+0x05d8:  008dbf00  CAI_BaseNPC::OnClearGoal(CAI_BehaviorBase*, CAI_GoalEntity*)
+0x05dc:  00906210  CAI_BaseNPC::OnBehaviorChangeStatus(CAI_BehaviorBase*, bool)
+0x05e0:  00906220  CAI_BaseNPC::AccessBehaviors()
+0x05e4:  00906230  CAI_BaseNPC::NumBehaviors()
+0x05e8:  00941f70  CAI_BaseNPC::ConditionName(int)
+0x05ec:  008e1f30  CAI_BaseNPC::RemoveIgnoredConditions()
+0x05f0:  008f55b0  CAI_BaseNPC::SelectIdealState()
+0x05f4:  008dbf10  CAI_BaseNPC::ShouldGoToIdleState()
+0x05f8:  008dbf20  CAI_BaseNPC::OnStateChange(NPC_STATE, NPC_STATE)
+0x05fc:  008e99b0  CAI_BaseNPC::UpdateEfficiency(bool)
+0x0600:  008e6f50  CAI_BaseNPC::Wake(bool)
+0x0604:  00904180  CAI_BaseNPC::SetActivity(Activity)
+0x0608:  008e04a0  CAI_BaseNPC::IsActivityMovementPhased(Activity)
+0x060c:  008e2200  CAI_BaseNPC::OnChangeActivity(Activity)
+0x0610:  008e2c60  CAI_BaseNPC::QueryHearSound(CSound*)
+0x0614:  008e20f0  CAI_BaseNPC::QuerySeeEntity(CBaseEntity*, bool)
+0x0618:  008ea7a0  CAI_BaseNPC::OnLooked(int)
+0x061c:  008ea4a0  CAI_BaseNPC::OnListened()
+0x0620:  00906240  CAI_BaseNPC::OnSeeEntity(CBaseEntity*)
+0x0624:  008dbf30  CAI_BaseNPC::ShouldNotDistanceCull()
+0x0628:  008e02a0  CAI_BaseNPC::GetSoundInterests()
+0x062c:  008e02b0  CAI_BaseNPC::GetSoundPriority(CSound*)
+0x0630:  008e2690  CAI_BaseNPC::GetBestSound(int)
+0x0634:  008e2080  CAI_BaseNPC::GetBestScent()
+0x0638:  008dbf40  CAI_BaseNPC::HearingSensitivity()
+0x063c:  00906250  CAI_BaseNPC::ShouldIgnoreSound(CSound*)
+0x0640:  008ea470  CAI_BaseNPC::ClearSenseConditions()
+0x0644:  008f7100  CAI_BaseNPC::BestEnemy()
+0x0648:  008e2de0  CAI_BaseNPC::IsValidEnemy(CBaseEntity*)
+0x064c:  008e0530  CAI_BaseNPC::CanBeAnEnemyOf(CBaseEntity*)
+0x0650:  008f6d60  CAI_BaseNPC::ShouldChooseNewEnemy()
+0x0654:  008f3320  CAI_BaseNPC::GatherEnemyConditions(CBaseEntity*)
+0x0658:  008dbfd0  CAI_BaseNPC::EnemyDistTolerance()
+0x065c:  008f2060  CAI_BaseNPC::StartTargetHandling(CBaseEntity*)
+0x0660:  008e0460  CAI_BaseNPC::CreateCustomTarget(Vector const&, float)
+0x0664:  008dbfe0  CAI_BaseNPC::ShouldPickADeathPose()
+0x0668:  008dbff0  CAI_BaseNPC::AllowedToIgnite()
+0x066c:  008e4180  CAI_BaseNPC::GetGoalRepathTolerance(CBaseEntity*, GoalType_t, Vector const&, Vector const&)
+0x0670:  008dc000  CAI_BaseNPC::IsCommandable()
+0x0674:  008e12e0  CAI_BaseNPC::IsPlayerAlly(CBasePlayer*)
+0x0678:  008dc010  CAI_BaseNPC::IsMedic()
+0x067c:  008dc020  CAI_BaseNPC::IsCommandMoving()
+0x0680:  008dc030  CAI_BaseNPC::ShouldAutoSummon()
+0x0684:  008e0950  CAI_BaseNPC::SetCommandGoal(Vector const&)
+0x0688:  008e0980  CAI_BaseNPC::ClearCommandGoal()
+0x068c:  008dc040  CAI_BaseNPC::OnTargetOrder()
+0x0690:  008dc050  CAI_BaseNPC::OnMoveOrder()
+0x0694:  008dc060  CAI_BaseNPC::IsValidCommandTarget(CBaseEntity*)
+0x0698:  008dc070  CAI_BaseNPC::OnMoveToCommandGoalFailed()
+0x069c:  008dc080  CAI_BaseNPC::GetSquadCommandRepresentative()
+0x06a0:  008dc090  CAI_BaseNPC::TargetOrder(CBaseEntity*, CAI_BaseNPC**, int)
+0x06a4:  008dd770  CAI_BaseNPC::MoveOrder(Vector const&, CAI_BaseNPC**, int)
+0x06a8:  008e11d0  CAI_BaseNPC::CanBeUsedAsAFriend()
+0x06ac:  008ea050  CAI_BaseNPC::CanRunAScriptedNPCInteraction(bool)
+0x06b0:  008e1900  CAI_BaseNPC::CanPlaySequence(bool, int)
+0x06b4:  008dc0b0  CAI_BaseNPC::CanPlaySentence(bool)
+0x06b8:  008e2f20  CAI_BaseNPC::PlaySentence(char const*, float, float, soundlevel_t, CBaseEntity*)
+0x06bc:  008e06f0  CAI_BaseNPC::PlayScriptedSentence(char const*, float, float, soundlevel_t, bool, CBaseEntity*)
+0x06c0:  008e2ab0  CAI_BaseNPC::FOkToMakeSound(int)
+0x06c4:  008e17b0  CAI_BaseNPC::JustMadeSound(int, float)
+0x06c8:  008dc0d0  CAI_BaseNPC::DeathSound(CTakeDamageInfo const&)
+0x06cc:  008dc0e0  CAI_BaseNPC::AlertSound()
+0x06d0:  008dc0f0  CAI_BaseNPC::IdleSound()
+0x06d4:  008dc100  CAI_BaseNPC::PainSound(CTakeDamageInfo const&)
+0x06d8:  008dc110  CAI_BaseNPC::FearSound()
+0x06dc:  008dc120  CAI_BaseNPC::LostEnemySound()
+0x06e0:  008dc130  CAI_BaseNPC::FoundEnemySound()
+0x06e4:  008dd730  CAI_BaseNPC::BarnacleDeathSound()
+0x06e8:  008dc140  CAI_BaseNPC::SpeakSentence(int)
+0x06ec:  008e0780  CAI_BaseNPC::ShouldPlayIdleSound()
+0x06f0:  008e1890  CAI_BaseNPC::MakeAIFootstepSound(float, float)
+0x06f4:  008dc150  CAI_BaseNPC::GetExpresser()
+0x06f8:  008dc160  CAI_BaseNPC::CanRespondToEvent(char const*)
+0x06fc:  008dc170  CAI_BaseNPC::RespondedTo(char const*, bool, bool)
+0x0700:  008e09c0  CAI_BaseNPC::PlayerHasIlluminatedNPC(CBasePlayer*, float)
+0x0704:  008e0c60  CAI_BaseNPC::CapabilitiesGet() const
+0x0708:  008e1230  CAI_BaseNPC::IsNavigationUrgent()
+0x070c:  008e08c0  CAI_BaseNPC::ShouldFailNav(bool)
+0x0710:  008dc180  CAI_BaseNPC::ShouldBruteForceFailedNav()
+0x0714:  00909a40  CAI_BaseNPC::GetTimeToNavGoal()
+0x0718:  008e08e0  CAI_BaseNPC::MovementCost(int, Vector const&, Vector const&, float*)
+0x071c:  008e1a30  CAI_BaseNPC::CalcIdealYaw(Vector const&)
+0x0720:  00909a30  CAI_BaseNPC::MaxYawSpeed()
+0x0724:  008e0670  CAI_BaseNPC::AddFacingTarget(CBaseEntity*, float, float, float)
+0x0728:  008e0690  CAI_BaseNPC::AddFacingTarget(Vector const&, float, float, float)
+0x072c:  008e06b0  CAI_BaseNPC::AddFacingTarget(CBaseEntity*, Vector const&, float, float, float)
+0x0730:  008e06d0  CAI_BaseNPC::GetFacingDirection(Vector&)
+0x0734:  009096a0  CAI_BaseNPC::IsJumpLegal(Vector const&, Vector const&, Vector const&) const
+0x0738:  008dc190  CAI_BaseNPC::StepHeight() const
+0x073c:  008dc1a0  CAI_BaseNPC::GetMaxJumpSpeed() const
+0x0740:  008dc1b0  CAI_BaseNPC::GetJumpGravity() const
+0x0744:  008e0900  CAI_BaseNPC::OverrideMove(float)
+0x0748:  008e08f0  CAI_BaseNPC::OverrideMoveFacing(AILocalMoveGoal_t const&, float)
+0x074c:  00909220  CAI_BaseNPC::IsUnusableNode(int, CAI_Hint*)
+0x0750:  00909260  CAI_BaseNPC::ValidateNavGoal()
+0x0754:  009091c0  CAI_BaseNPC::IsCurTaskContinuousMove()
+0x0758:  008dc1c0  CAI_BaseNPC::IsValidMoveAwayDest(Vector const&)
+0x075c:  00906260  CAI_BaseNPC::OnMovementFailed()
+0x0760:  00906270  CAI_BaseNPC::OnMovementComplete()
+0x0764:  008ff970  CAI_BaseNPC::IsUnreachable(CBaseEntity*)
+0x0768:  008e0920  CAI_BaseNPC::CalcYawSpeed()
+0x076c:  008e13d0  CAI_BaseNPC::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
+0x0770:  008e1340  CAI_BaseNPC::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
+0x0774:  008e2230  CAI_BaseNPC::OnObstructingDoor(AILocalMoveGoal_t*, CBaseDoor*, float, AIMoveResult_t*)
+0x0778:  008e3910  CAI_BaseNPC::OnUpcomingPropDoor(AILocalMoveGoal_t*, CBasePropDoor*, float, AIMoveResult_t*)
+0x077c:  008dc1d0  CAI_BaseNPC::GetNodeViewOffset()
+0x0780:  008e0590  CAI_BaseNPC::EyeOffset(Activity)
+0x0784:  008e4800  CAI_BaseNPC::EyeLookTarget()
+0x0788:  008dc210  CAI_BaseNPC::AddLookTarget(CBaseEntity*, float, float, float)
+0x078c:  008dc220  CAI_BaseNPC::AddLookTarget(Vector const&, float, float, float)
+0x0790:  008f5c40  CAI_BaseNPC::SetHeadDirection(Vector const&, float)
+0x0794:  008e9570  CAI_BaseNPC::MaintainLookTargets(float)
+0x0798:  008e0da0  CAI_BaseNPC::ValidEyeTarget(Vector const&)
+0x079c:  008dc230  CAI_BaseNPC::FacingPosition()
+0x07a0:  008e26f0  CAI_BaseNPC::MaintainTurnActivity()
+0x07a4:  008e2550  CAI_BaseNPC::AimGun()
+0x07a8:  008e6410  CAI_BaseNPC::SetAim(Vector const&)
+0x07ac:  008e62a0  CAI_BaseNPC::RelaxAim()
+0x07b0:  008dc260  CAI_BaseNPC::GetAlternateMoveShootTarget()
+0x07b4:  008e08b0  CAI_BaseNPC::InputOutsideTransition(inputdata_t&)
+0x07b8:  008f5400  CAI_BaseNPC::InputInsideTransition(inputdata_t&)
+0x07bc:  008eab50  CAI_BaseNPC::SetScriptedScheduleIgnoreConditions(Interruptability_t)
+0x07c0:  00908fa0  CAI_BaseNPC::ScheduledMoveToGoalEntity(int, CBaseEntity*, Activity)
+0x07c4:  009090b0  CAI_BaseNPC::ScheduledFollowPath(int, CBaseEntity*, Activity)
+0x07c8:  008e0520  CAI_BaseNPC::GetEnemies()
+0x07cc:  008e1b50  CAI_BaseNPC::RemoveMemory()
+0x07d0:  008e1df0  CAI_BaseNPC::UpdateEnemyMemory(CBaseEntity*, Vector const&, CBaseEntity*)
+0x07d4:  008e0430  CAI_BaseNPC::GetReactionDelay(CBaseEntity*)
+0x07d8:  008e0e90  CAI_BaseNPC::CanHolsterWeapon()
+0x07dc:  008f0420  CAI_BaseNPC::HolsterWeapon()
+0x07e0:  008f0510  CAI_BaseNPC::UnholsterWeapon()
+0x07e4:  008e6880  CAI_BaseNPC::OnRangeAttack1()
+0x07e8:  008e1c00  CAI_BaseNPC::OnUpdateShotRegulator()
+0x07ec:  008e15f0  CAI_BaseNPC::InitSquad()
+0x07f0:  008dd200  CAI_BaseNPC::SquadSlotName(int)
+0x07f4:  00916f40  CAI_BaseNPC::SetSquad(CAI_Squad*)
+0x07f8:  008dc270  CAI_BaseNPC::IsSilentSquadMember() const
+0x07fc:  0090b230  CAI_BaseNPC::FindCoverPos(CBaseEntity*, Vector*)
+0x0800:  0090b330  CAI_BaseNPC::FindCoverPosInRadius(CBaseEntity*, Vector const&, float, Vector*)
+0x0804:  0090b5d0  CAI_BaseNPC::FindCoverPos(CSound*, Vector*)
+0x0808:  00916ca0  CAI_BaseNPC::IsValidCover(Vector const&, CAI_Hint const*)
+0x080c:  00916d70  CAI_BaseNPC::IsValidShootPosition(Vector const&, CAI_Node*, CAI_Hint const*)
+0x0810:  008dc280  CAI_BaseNPC::TestShootPosition(Vector const&, Vector const&)
+0x0814:  008f9e90  CAI_BaseNPC::IsCoverPosition(Vector const&, Vector const&)
+0x0818:  008dc2b0  CAI_BaseNPC::CoverRadius()
+0x081c:  009062a0  CAI_BaseNPC::GetMaxTacticalLateralMovement()
+0x0820:  009062b0  CAI_BaseNPC::OnChangeHintGroup(string_t, string_t)
+0x0824:  008e0760  CAI_BaseNPC::ShouldFadeOnDeath()
+0x0828:  008e0370  CAI_BaseNPC::RangeAttack1Conditions(float, float)
+0x082c:  008e03b0  CAI_BaseNPC::RangeAttack2Conditions(float, float)
+0x0830:  008e2be0  CAI_BaseNPC::MeleeAttack1Conditions(float, float)
+0x0834:  008e03f0  CAI_BaseNPC::MeleeAttack2Conditions(float, float)
+0x0838:  008dc2c0  CAI_BaseNPC::InnateRange1MinRange()
+0x083c:  008dc2d0  CAI_BaseNPC::InnateRange1MaxRange()
+0x0840:  008dc2e0  CAI_BaseNPC::OnBeginMoveAndShoot()
+0x0844:  008dc2f0  CAI_BaseNPC::OnEndMoveAndShoot()
+0x0848:  008dc300  CAI_BaseNPC::UseAttackSquadSlots()
+0x084c:  008e3530  CAI_BaseNPC::FindNamedEntity(char const*, IEntityFindFilter*)
+0x0850:  008ea340  CAI_BaseNPC::ClearAttackConditions()
+0x0854:  008ed8d0  CAI_BaseNPC::ShouldLookForBetterWeapon()
+0x0858:  008e1ce0  CAI_BaseNPC::GiveWeapon(string_t)
+0x085c:  008dc310  CAI_BaseNPC::OnGivenWeapon(CBaseCombatWeapon*)
+0x0860:  008e9210  CAI_BaseNPC::WeaponLOSCondition(Vector const&, Vector const&, bool)
+0x0864:  008de360  CAI_BaseNPC::CurrentWeaponLOSCondition(Vector const&, bool)
+0x0868:  008dc320  CAI_BaseNPC::IsWaitingToRappel()
+0x086c:  008dc330  CAI_BaseNPC::BeginRappel()
+0x0870:  0090c4e0  CAI_BaseNPC::TranslateNavGoal(CBaseEntity*, Vector&)
+0x0874:  00906600  CAI_BaseNPC::GetDefaultNavGoalTolerance()
+0x0878:  008e9500  CAI_BaseNPC::FCanCheckAttacks()
+0x087c:  008dc340  CAI_BaseNPC::CheckAmmo()
+0x0880:  008e0260  CAI_BaseNPC::FValidateHintType(CAI_Hint*)
+0x0884:  008e0270  CAI_BaseNPC::GetHintActivity(short, Activity)
+0x0888:  008e0290  CAI_BaseNPC::GetHintDelay(short)
+0x088c:  008e0550  CAI_BaseNPC::GetCoverActivity(CAI_Hint*)
+0x0890:  008fa010  CAI_BaseNPC::GetReloadActivity(CAI_Hint*)
+0x0894:  0090c280  CAI_BaseNPC::SetTurnActivity()
+0x0898:  008e01f0  CAI_BaseNPC::GetHitgroupDamageMultiplier(int, CTakeDamageInfo const&)
+0x089c:  008e8440  CAI_BaseNPC::PlayerInSpread(Vector const&, Vector const&, float, float, bool)
+0x08a0:  008edda0  CAI_BaseNPC::InnateWeaponLOSCondition(Vector const&, Vector const&, bool)
+0x08a4:  008e0eb0  CAI_BaseNPC::GetFlinchActivity(bool, bool)
+0x08a8:  008f28e0  CAI_BaseNPC::GetShootEnemyDir(Vector const&, bool)
+0x08ac:  008e0640  CAI_BaseNPC::CollectShotStats(Vector const&, Vector const&)
+0x08b0:  008e0650  CAI_BaseNPC::ShouldMoveAndShoot()
+0x08b4:  008e01a0  CAI_BaseNPC::IsLightDamage(CTakeDamageInfo const&)
+0x08b8:  008e01c0  CAI_BaseNPC::IsHeavyDamage(CTakeDamageInfo const&)
+0x08bc:  008e0710  CAI_BaseNPC::PickupWeapon(CBaseCombatWeapon*)
+0x08c0:  008dc390  CAI_BaseNPC::PickupItem(CBaseEntity*)
+0x08c4:  008dc3a0  CAI_BaseNPC::NotifyDeadFriend(CBaseEntity*)
+0x08c8:  0090baf0  CAI_BaseNPC::CalcReasonableFacing(bool)
+0x08cc:  008dc3b0  CAI_BaseNPC::IsValidReasonableFacing(Vector const&, float)
+0x08d0:  0090f7a0  CAI_BaseNPC::GetReasonableFacingDist()
+0x08d4:  008dc3c0  CAI_BaseNPC::GetClassScheduleIdSpace()
+0x08d8:  009a5660  CAI_BaseNPC::GetSquadSlotDebugName(int)
+0x08dc:  008e0a70  CAI_BaseNPC::IsCrouching()
+0x08e0:  008e0a50  CAI_BaseNPC::Crouch()
+0x08e4:  008e0aa0  CAI_BaseNPC::Stand()
+0x08e8:  008e0ad0  CAI_BaseNPC::DesireCrouch()
+0x08ec:  00901c60  CAI_BaseNPC::IsCrouchedActivity(Activity)
+0x08f0:  008dc3d0  CAI_BaseNPC::GetCrouchEyeOffset()
+0x08f4:  008dc3f0  CAI_BaseNPC::GetCrouchGunOffset()
+0x08f8:  008f4010  CAI_BaseNPC::ReportAIState()
+0x08fc:  008ff4c0  CAI_BaseNPC::ReportOverThinkLimit(float)
+0x0900:  008e09d0  CAI_BaseNPC::ShouldProbeCollideAgainstEntity(CBaseEntity*)
+0x0904:  009087b0  CAI_BaseNPCFlyerNew::MinGroundDist()
+0x0908:  00908a00  CAI_BaseNPCFlyerNew::AbortedMovement()
+0x090c:  fffff7b0  (unknown)
+0x0910:  01131dbc  typeinfo for CAI_BaseNPCFlyerNew
+0x0914:  008e0910  non-virtual thunk to CAI_BaseNPC::CalcYawSpeed()
+0x0918:  008e13c0  non-virtual thunk to CAI_BaseNPC::OnCalcBaseMove(AILocalMoveGoal_t*, float, AIMoveResult_t*)
+0x091c:  008e1330  non-virtual thunk to CAI_BaseNPC::OnObstructionPreSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
+0x0920:  008dbe30  CAI_DefMovementSink::OnFailedSteer(AILocalMoveGoal_t*, float, AIMoveResult_t*)
+0x0924:  008dbe40  CAI_DefMovementSink::OnFailedLocalNavigation(AILocalMoveGoal_t*, float, AIMoveResult_t*)
+0x0928:  008dbe50  CAI_DefMovementSink::OnInsufficientStopDist(AILocalMoveGoal_t*, float, AIMoveResult_t*)
+0x092c:  008dbe60  CAI_DefMovementSink::OnMoveBlocked(AIMoveResult_t*)
+0x0930:  008dbe70  CAI_DefMovementSink::OnMoveStalled(AILocalMoveGoal_t const&)
+0x0934:  008dbe80  CAI_DefMovementSink::OnMoveExecuteFailed(AILocalMoveGoal_t const&, AIMoveTrace_t const&, AIMotorMoveResult_t, AIMoveResult_t*)
