CPhysMagnet

+0x0000:  00b5b820  CPhysMagnet::~CPhysMagnet()
+0x0004:  00b5b910  CPhysMagnet::~CPhysMagnet()
+0x0008:  009cfff0  CBaseEntity::SetRefEHandle(CBaseHandle const&)
+0x000c:  005fef90  CBaseEntity::GetRefEHandle() const
+0x0010:  005fef30  CBaseEntity::GetCollideable()
+0x0014:  005fef40  CBaseEntity::GetNetworkable()
+0x0018:  005fef50  CBaseEntity::GetBaseEntity()
+0x001c:  005fef80  CBaseEntity::GetModelIndex() const
+0x0020:  005fef60  CBaseEntity::GetModelName() const
+0x0024:  009e08a0  CBaseEntity::SetModelIndex(int)
+0x0028:  00b56270  CPhysMagnet::GetServerClass()
+0x002c:  00b56280  CPhysMagnet::YouForgotToImplementOrDeclareServerClass()
+0x0030:  00b56260  CPhysMagnet::GetDataDescMap()
+0x0034:  009d3d10  CBaseEntity::SetModelIndexOverride(int, int)
+0x0038:  009b1140  CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
+0x003c:  009b85a0  CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
+0x0040:  009cfe80  CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
+0x0044:  0062e060  CBaseEntity::ShouldCollide(int, int) const
+0x0048:  009d3170  CBaseEntity::SetOwnerEntity(CBaseEntity*)
+0x004c:  009d6ac0  CBaseEntity::ShouldTransmit(CCheckTransmitInfo const*)
+0x0050:  009d69a0  CBaseEntity::UpdateTransmitState()
+0x0054:  009b1250  CBaseAnimating::SetTransmit(CCheckTransmitInfo*, bool)
+0x0058:  0062fca0  CBaseEntity::GetTracerType()
+0x005c:  00b565b0  CPhysMagnet::Spawn()
+0x0060:  00b56560  CPhysMagnet::Precache()
+0x0064:  009badd0  CBaseAnimating::SetModel(char const*)
+0x0068:  009b66d0  CBaseAnimating::OnNewModel()
+0x006c:  009d1130  CBaseEntity::PostConstructor(char const*)
+0x0070:  009cf910  CBaseEntity::PostClientActive()
+0x0074:  0062d370  CBaseEntity::ParseMapData(CEntityMapData*)
+0x0078:  0062d3e0  CBaseEntity::KeyValue(char const*, char const*)
+0x007c:  0062db80  CBaseEntity::KeyValue(char const*, float)
+0x0080:  0062dbe0  CBaseEntity::KeyValue(char const*, Vector const&)
+0x0084:  0062dc60  CBaseEntity::GetKeyValue(char const*, char*, int)
+0x0088:  009b3330  CBaseAnimating::Activate()
+0x008c:  009db940  CBaseEntity::SetParent(CBaseEntity*, int)
+0x0090:  009cf9a0  CBaseEntity::ObjectCaps()
+0x0094:  009d9860  CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
+0x0098:  009b4590  CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
+0x009c:  009d9df0  CBaseEntity::DrawDebugGeometryOverlays()
+0x00a0:  009b6d70  CBaseAnimating::DrawDebugTextOverlays()
+0x00a4:  009cfe00  CBaseEntity::Save(ISave&)
+0x00a8:  009b4500  CBaseAnimating::Restore(IRestore&)
+0x00ac:  009cfe40  CBaseEntity::ShouldSavePhysics()
+0x00b0:  009d9040  CBaseEntity::OnSave(IEntitySaveUtils*)
+0x00b4:  009b6b50  CBaseAnimating::OnRestore()
+0x00b8:  005fe990  CBaseEntity::RequiredEdictIndex()
+0x00bc:  005fe9a0  CBaseEntity::MoveDone()
+0x00c0:  005fe9d0  CBaseEntity::Think()
+0x00c4:  005fea00  CBaseEntity::NetworkStateChanged_m_nNextThinkTick()
+0x00c8:  005fea10  CBaseEntity::NetworkStateChanged_m_nNextThinkTick(void*)
+0x00cc:  00629700  CBaseAnimating::GetBaseAnimating()
+0x00d0:  009cff80  CBaseEntity::GetResponseSystem()
+0x00d4:  009de960  CBaseEntity::DispatchResponse(char const*)
+0x00d8:  009cfd20  CBaseEntity::Classify()
+0x00dc:  005fea30  CBaseEntity::DeathNotice(CBaseEntity*)
+0x00e0:  005fea40  CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
+0x00e4:  009cfd30  CBaseEntity::GetAutoAimRadius()
+0x00e8:  005fea60  CBaseEntity::GetAutoAimCenter()
+0x00ec:  0062f380  CBaseEntity::GetBeamTraceFilter()
+0x00f0:  009cfd70  CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
+0x00f4:  0062fb50  CBaseEntity::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
+0x00f8:  005feaa0  CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
+0x00fc:  009d28e0  CBaseEntity::OnTakeDamage(CTakeDamageInfo const&)
+0x0100:  005feab0  CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
+0x0104:  009d18d0  CBaseEntity::TakeHealth(float, int)
+0x0108:  005fefa0  CBaseEntity::IsAlive()
+0x010c:  009d03a0  CBaseEntity::Event_Killed(CTakeDamageInfo const&)
+0x0110:  005feac0  CBaseEntity::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
+0x0114:  0062f730  CBaseEntity::BloodColor()
+0x0118:  005fead0  CBaseEntity::IsTriggered(CBaseEntity*)
+0x011c:  005feae0  CBaseEntity::IsNPC() const
+0x0120:  005feaf0  CBaseEntity::MyCombatCharacterPointer()
+0x0124:  005feb00  CBaseEntity::MyNextBotPointer()
+0x0128:  005feb10  CBaseEntity::GetDelay()
+0x012c:  009d1870  CBaseEntity::IsMoving()
+0x0130:  0062e540  CBaseEntity::DamageDecal(int, int)
+0x0134:  0062e0d0  CBaseEntity::DecalTrace(CGameTrace*, char const*)
+0x0138:  0062e1b0  CBaseEntity::ImpactTrace(CGameTrace*, int, char const*)
+0x013c:  005feb20  CBaseEntity::OnControls(CBaseEntity*)
+0x0140:  009d2040  CBaseEntity::HasTarget(string_t)
+0x0144:  005feb30  CBaseEntity::IsPlayer() const
+0x0148:  005feb40  CBaseEntity::IsNetClient() const
+0x014c:  005feb50  CBaseEntity::IsTemplate()
+0x0150:  005feb60  CBaseEntity::IsBaseObject() const
+0x0154:  005feb70  CBaseEntity::IsBaseTrain() const
+0x0158:  005feb80  CBaseEntity::IsCombatItem() const
+0x015c:  005feb90  CBaseEntity::IsBaseCombatWeapon() const
+0x0160:  005feba0  CBaseEntity::IsWearable() const
+0x0164:  005febb0  CBaseEntity::MyCombatWeaponPointer()
+0x0168:  005febc0  CBaseEntity::GetServerVehicle()
+0x016c:  009d1510  CBaseEntity::IsViewable()
+0x0170:  009d3560  CBaseEntity::ChangeTeam(int)
+0x0174:  009d1630  CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
+0x0178:  005ff0e0  CBaseEntity::CanStandOn(CBaseEntity*) const
+0x017c:  005febd0  CBaseEntity::CanStandOn(edict_t*) const
+0x0180:  005fec20  CBaseEntity::GetEnemy()
+0x0184:  005fec30  CBaseEntity::GetEnemy() const
+0x0188:  009d1570  CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
+0x018c:  009cfa70  CBaseEntity::StartTouch(CBaseEntity*)
+0x0190:  00b562c0  CPhysMagnet::Touch(CBaseEntity*)
+0x0194:  009cfb50  CBaseEntity::EndTouch(CBaseEntity*)
+0x0198:  005fec40  CBaseEntity::StartBlocked(CBaseEntity*)
+0x019c:  009cfba0  CBaseEntity::Blocked(CBaseEntity*)
+0x01a0:  005fec50  CBaseEntity::EndBlocked()
+0x01a4:  006e29e0  CBaseEntity::PhysicsSimulate()
+0x01a8:  009def20  CBaseEntity::UpdateOnRemove()
+0x01ac:  005fec60  CBaseEntity::StopLoopingSounds()
+0x01b0:  009d0450  CBaseEntity::SUB_AllowedToFade()
+0x01b4:  009b3790  CBaseAnimating::Teleport(Vector const*, QAngle const*, Vector const*)
+0x01b8:  009cff50  CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
+0x01bc:  0062f5b0  CBaseEntity::MakeTracer(Vector const&, CGameTrace const&, int)
+0x01c0:  0062f6a0  CBaseEntity::GetTracerAttachment()
+0x01c4:  00630f20  CBaseEntity::FireBullets(FireBulletsInfo_t const&)
+0x01c8:  0062f410  CBaseEntity::DoImpactEffect(CGameTrace&, int)
+0x01cc:  005fec70  CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
+0x01d0:  005fec80  CBaseEntity::Respawn()
+0x01d4:  005fec90  CBaseEntity::IsLockedByMaster()
+0x01d8:  005feca0  CBaseEntity::GetMaxHealth() const
+0x01dc:  009b0dd0  CBaseAnimating::ModifyOrAppendCriteria(AI_CriteriaSet&)
+0x01e0:  005fecb0  CBaseEntity::NetworkStateChanged_m_iMaxHealth()
+0x01e4:  005fecc0  CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
+0x01e8:  005fecd0  CBaseEntity::NetworkStateChanged_m_iHealth()
+0x01ec:  005fece0  CBaseEntity::NetworkStateChanged_m_iHealth(void*)
+0x01f0:  005fecf0  CBaseEntity::NetworkStateChanged_m_lifeState()
+0x01f4:  005fed00  CBaseEntity::NetworkStateChanged_m_lifeState(void*)
+0x01f8:  005fed10  CBaseEntity::NetworkStateChanged_m_takedamage()
+0x01fc:  005fed20  CBaseEntity::NetworkStateChanged_m_takedamage(void*)
+0x0200:  009cff40  CBaseEntity::GetDamageType() const
+0x0204:  005fed30  CBaseEntity::GetDamage()
+0x0208:  005fed40  CBaseEntity::SetDamage(float)
+0x020c:  0062cb00  CBaseEntity::EyePosition()
+0x0210:  0062cb80  CBaseEntity::EyeAngles()
+0x0214:  0062cbb0  CBaseEntity::LocalEyeAngles()
+0x0218:  0062cbc0  CBaseEntity::EarPosition()
+0x021c:  009cf920  CBaseEntity::BodyTarget(Vector const&, bool)
+0x0220:  009cf960  CBaseEntity::HeadTarget(Vector const&)
+0x0224:  009d8d00  CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
+0x0228:  0062cc60  CBaseEntity::GetViewOffset() const
+0x022c:  0062cbf0  CBaseEntity::SetViewOffset(Vector const&)
+0x0230:  005fef00  CBaseEntity::GetSmoothedVelocity()
+0x0234:  009b5b80  CBaseAnimating::GetVelocity(Vector*, Vector*)
+0x0238:  009d3d90  CBaseEntity::FVisible(CBaseEntity*, int, CBaseEntity**)
+0x023c:  009d2610  CBaseEntity::FVisible(Vector const&, int, CBaseEntity**)
+0x0240:  005fed50  CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
+0x0244:  009d1090  CBaseEntity::GetAttackDamageScale(CBaseEntity*)
+0x0248:  009d0ff0  CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
+0x024c:  005fed60  CBaseEntity::GetGroundVelocityToApply(Vector&)
+0x0250:  005fed90  CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
+0x0254:  005feda0  CBaseEntity::Splash()
+0x0258:  0062cc70  CBaseEntity::WorldSpaceCenter() const
+0x025c:  009cfdc0  CBaseEntity::GetSoundEmissionOrigin() const
+0x0260:  0062fcb0  CBaseEntity::ModifyEmitSoundParams(EmitSound_t&)
+0x0264:  005fedb0  CBaseEntity::IsDeflectable()
+0x0268:  005fedc0  CBaseEntity::Deflected(CBaseEntity*, Vector&)
+0x026c:  0062ec20  CBaseEntity::CreateVPhysics()
+0x0270:  005fedd0  CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
+0x0274:  0062eba0  CBaseEntity::VPhysicsDestroyObject()
+0x0278:  00630b80  CBaseEntity::VPhysicsUpdate(IPhysicsObject*)
+0x027c:  009d14b0  CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
+0x0280:  009cfc30  CBaseEntity::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
+0x0284:  005fede0  CBaseEntity::VPhysicsShadowUpdate(IPhysicsObject*)
+0x0288:  00b5bdf0  CPhysMagnet::VPhysicsCollision(int, gamevcollisionevent_t*)
+0x028c:  009d0eb0  CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
+0x0290:  009d9430  CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
+0x0294:  009cfc40  CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
+0x0298:  009cfc70  CBaseEntity::VPhysicsIsFlesh()
+0x029c:  005fedf0  CBaseEntity::HasPhysicsAttacker(float)
+0x02a0:  006e0020  CBaseEntity::PhysicsSolidMaskForEntity() const
+0x02a4:  006e0c60  CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
+0x02a8:  00b48790  CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
+0x02ac:  009b0c60  CBaseAnimating::GetStepOrigin() const
+0x02b0:  009b0ca0  CBaseAnimating::GetStepAngles() const
+0x02b4:  005fee00  CBaseEntity::ShouldDrawWaterImpacts()
+0x02b8:  005fee10  CBaseEntity::NetworkStateChanged_m_fFlags()
+0x02bc:  005fee20  CBaseEntity::NetworkStateChanged_m_fFlags(void*)
+0x02c0:  005fee30  CBaseEntity::NetworkStateChanged_m_nWaterLevel()
+0x02c4:  005fee40  CBaseEntity::NetworkStateChanged_m_nWaterLevel(void*)
+0x02c8:  005fee50  CBaseEntity::NetworkStateChanged_m_hGroundEntity()
+0x02cc:  005fee60  CBaseEntity::NetworkStateChanged_m_hGroundEntity(void*)
+0x02d0:  005fee70  CBaseEntity::NetworkStateChanged_m_vecBaseVelocity()
+0x02d4:  005fee80  CBaseEntity::NetworkStateChanged_m_vecBaseVelocity(void*)
+0x02d8:  005fee90  CBaseEntity::NetworkStateChanged_m_flFriction()
+0x02dc:  005feea0  CBaseEntity::NetworkStateChanged_m_flFriction(void*)
+0x02e0:  005feeb0  CBaseEntity::NetworkStateChanged_m_vecVelocity()
+0x02e4:  005feec0  CBaseEntity::NetworkStateChanged_m_vecVelocity(void*)
+0x02e8:  005feed0  CBaseEntity::NetworkStateChanged_m_vecViewOffset()
+0x02ec:  005feee0  CBaseEntity::NetworkStateChanged_m_vecViewOffset(void*)
+0x02f0:  005feef0  CBaseEntity::ShouldBlockNav() const
+0x02f4:  009b0c10  CBaseAnimating::GetIdealSpeed() const
+0x02f8:  009b0c20  CBaseAnimating::GetIdealAccel() const
+0x02fc:  009b7db0  CBaseAnimating::StudioFrameAdvance()
+0x0300:  009b1ee0  CBaseAnimating::SetSequence(int)
+0x0304:  00629710  CBaseAnimating::IsActivityFinished()
+0x0308:  009b34e0  CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
+0x030c:  00629720  CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
+0x0310:  009b1c70  CBaseAnimating::BecomeRagdollOnClient(Vector const&)
+0x0314:  009b0c00  CBaseAnimating::IsRagdoll()
+0x0318:  009b62f0  CBaseAnimating::CanBecomeRagdoll()
+0x031c:  009bab00  CBaseAnimating::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
+0x0320:  009b84d0  CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
+0x0324:  009b8f70  CBaseAnimating::SetupBones(matrix3x4_t*, int)
+0x0328:  009b1480  CBaseAnimating::CalculateIKLocks(float)
+0x032c:  009b6890  CBaseAnimating::DispatchAnimEvents(CBaseAnimating*)
+0x0330:  009b1030  CBaseAnimating::HandleAnimEvent(animevent_t*)
+0x0334:  009b0c50  CBaseAnimating::PopulatePoseParameters()
+0x0338:  009b4f10  CBaseAnimating::GetAttachment(int, matrix3x4_t&)
+0x033c:  009b8830  CBaseAnimating::InitBoneControllers()
+0x0340:  009b5e30  CBaseAnimating::GetGroundSpeedVelocity()
+0x0344:  009b1020  CBaseAnimating::RefreshCollisionBounds()
+0x0348:  009b1b00  CBaseAnimating::Ignite(float, bool, float, bool)
+0x034c:  009b0f60  CBaseAnimating::IgniteLifetime(float)
+0x0350:  009b0ea0  CBaseAnimating::IgniteNumHitboxFires(int)
+0x0354:  009b0de0  CBaseAnimating::IgniteHitboxFireScale(float)
+0x0358:  00629c20  CBaseAnimating::Extinguish()
+0x035c:  00629fc0  CBaseAnimating::SetLightingOriginRelative(CBaseEntity*)
+0x0360:  00629e00  CBaseAnimating::SetLightingOrigin(CBaseEntity*)
+0x0364:  00b56f50  CPhysMagnet::ConstraintBroken(IPhysicsConstraint*)
+0x0368:  fffffb78  (unknown)
+0x036c:  0119f940  typeinfo for CPhysMagnet
+0x0370:  00b56f40  non-virtual thunk to CPhysMagnet::ConstraintBroken(IPhysicsConstraint*)
