CTFPlayer

+0x0000:  00deb5d0  CTFPlayer::~CTFPlayer()
+0x0004:  00debe60  CTFPlayer::~CTFPlayer()
+0x0008:  009cfff0  CBaseEntity::SetRefEHandle(CBaseHandle const&)
+0x000c:  005fef90  CBaseEntity::GetRefEHandle() const
+0x0010:  005fef30  CBaseEntity::GetCollideable()
+0x0014:  005fef40  CBaseEntity::GetNetworkable()
+0x0018:  005fef50  CBaseEntity::GetBaseEntity()
+0x001c:  005fef80  CBaseEntity::GetModelIndex() const
+0x0020:  005fef60  CBaseEntity::GetModelName() const
+0x0024:  009e08a0  CBaseEntity::SetModelIndex(int)
+0x0028:  00dbefb0  CTFPlayer::GetServerClass()
+0x002c:  00dbefc0  CTFPlayer::YouForgotToImplementOrDeclareServerClass()
+0x0030:  00dbef10  CTFPlayer::GetDataDescMap()
+0x0034:  009d3d10  CBaseEntity::SetModelIndexOverride(int, int)
+0x0038:  009b1140  CBaseAnimating::TestCollision(Ray_t const&, unsigned int, CGameTrace&)
+0x003c:  009b85a0  CBaseAnimating::TestHitboxes(Ray_t const&, unsigned int, CGameTrace&)
+0x0040:  009cfe80  CBaseEntity::ComputeWorldSpaceSurroundingBox(Vector*, Vector*)
+0x0044:  00dbf630  CTFPlayer::ShouldCollide(int, int) const
+0x0048:  009d3170  CBaseEntity::SetOwnerEntity(CBaseEntity*)
+0x004c:  00dc1bb0  CTFPlayer::ShouldTransmit(CCheckTransmitInfo const*)
+0x0050:  00b63180  CBasePlayer::UpdateTransmitState()
+0x0054:  009c0980  CBaseCombatCharacter::SetTransmit(CCheckTransmitInfo*, bool)
+0x0058:  0063a690  CBasePlayer::GetTracerType()
+0x005c:  00de22d0  CTFPlayer::Spawn()
+0x0060:  00dc8620  CTFPlayer::Precache()
+0x0064:  00b64d00  CBasePlayer::SetModel(char const*)
+0x0068:  009b66d0  CBaseAnimating::OnNewModel()
+0x006c:  009f8280  CBaseMultiplayerPlayer::PostConstructor(char const*)
+0x0070:  009cf910  CBaseEntity::PostClientActive()
+0x0074:  0062d370  CBaseEntity::ParseMapData(CEntityMapData*)
+0x0078:  0062d3e0  CBaseEntity::KeyValue(char const*, char const*)
+0x007c:  0062db80  CBaseEntity::KeyValue(char const*, float)
+0x0080:  0062dbe0  CBaseEntity::KeyValue(char const*, Vector const&)
+0x0084:  0062dc60  CBaseEntity::GetKeyValue(char const*, char*, int)
+0x0088:  00b6fde0  CBasePlayer::Activate()
+0x008c:  009db940  CBaseEntity::SetParent(CBaseEntity*, int)
+0x0090:  009f92b0  CBasePlayer::ObjectCaps()
+0x0094:  009d9860  CBaseEntity::AcceptInput(char const*, CBaseEntity*, CBaseEntity*, variant_t, int)
+0x0098:  009b4590  CBaseAnimating::GetInputDispatchEffectPosition(char const*, Vector&, QAngle&)
+0x009c:  00b62f10  CBasePlayer::DrawDebugGeometryOverlays()
+0x00a0:  00dbffd0  CTFPlayer::DrawDebugTextOverlays()
+0x00a4:  00b624e0  CBasePlayer::Save(ISave&)
+0x00a8:  00b6ccd0  CBasePlayer::Restore(IRestore&)
+0x00ac:  00b61ec0  CBasePlayer::ShouldSavePhysics()
+0x00b0:  009d9040  CBaseEntity::OnSave(IEntitySaveUtils*)
+0x00b4:  00b78620  CBasePlayer::OnRestore()
+0x00b8:  009f8c70  CBasePlayer::RequiredEdictIndex()
+0x00bc:  005fe9a0  CBaseEntity::MoveDone()
+0x00c0:  005fe9d0  CBaseEntity::Think()
+0x00c4:  009f9480  CBasePlayer::NetworkStateChanged_m_nNextThinkTick()
+0x00c8:  009f9ab0  CBasePlayer::NetworkStateChanged_m_nNextThinkTick(void*)
+0x00cc:  00629700  CBaseAnimating::GetBaseAnimating()
+0x00d0:  00dc13f0  CTFPlayer::GetResponseSystem()
+0x00d4:  009f90f0  CAI_ExpresserHost<CBasePlayer>::DispatchResponse(char const*)
+0x00d8:  00b61c40  CBasePlayer::Classify()
+0x00dc:  005fea30  CBaseEntity::DeathNotice(CBaseEntity*)
+0x00e0:  005fea40  CBaseEntity::ShouldAttractAutoAim(CBaseEntity*)
+0x00e4:  009cfd30  CBaseEntity::GetAutoAimRadius()
+0x00e8:  005fea60  CBaseEntity::GetAutoAimCenter()
+0x00ec:  0062f380  CBaseEntity::GetBeamTraceFilter()
+0x00f0:  009cfd70  CBaseEntity::PassesDamageFilter(CTakeDamageInfo const&)
+0x00f4:  00ddd270  CTFPlayer::TraceAttack(CTakeDamageInfo const&, Vector const&, CGameTrace*, CDmgAccumulator*)
+0x00f8:  005feaa0  CBaseEntity::CanBeHitByMeleeAttack(CBaseEntity*)
+0x00fc:  00e02f20  CTFPlayer::OnTakeDamage(CTakeDamageInfo const&)
+0x0100:  005feab0  CBaseEntity::AdjustDamageDirection(CTakeDamageInfo const&, Vector&, CBaseEntity*)
+0x0104:  00dd86f0  CTFPlayer::TakeHealth(float, int)
+0x0108:  005fefa0  CBaseEntity::IsAlive()
+0x010c:  00df4c70  CTFPlayer::Event_Killed(CTakeDamageInfo const&)
+0x0110:  00e08ed0  CTFPlayer::Event_KilledOther(CBaseEntity*, CTakeDamageInfo const&)
+0x0114:  0061e830  CBaseCombatCharacter::BloodColor()
+0x0118:  005fead0  CBaseEntity::IsTriggered(CBaseEntity*)
+0x011c:  005feae0  CBaseEntity::IsNPC() const
+0x0120:  007c9920  CBaseCombatCharacter::MyCombatCharacterPointer()
+0x0124:  005feb00  CBaseEntity::MyNextBotPointer()
+0x0128:  005feb10  CBaseEntity::GetDelay()
+0x012c:  009d1870  CBaseEntity::IsMoving()
+0x0130:  0062e540  CBaseEntity::DamageDecal(int, int)
+0x0134:  0062e0d0  CBaseEntity::DecalTrace(CGameTrace*, char const*)
+0x0138:  0062e1b0  CBaseEntity::ImpactTrace(CGameTrace*, int, char const*)
+0x013c:  005feb20  CBaseEntity::OnControls(CBaseEntity*)
+0x0140:  009d2040  CBaseEntity::HasTarget(string_t)
+0x0144:  009f8cb0  CBasePlayer::IsPlayer() const
+0x0148:  009f8cc0  CBasePlayer::IsNetClient() const
+0x014c:  005feb50  CBaseEntity::IsTemplate()
+0x0150:  005feb60  CBaseEntity::IsBaseObject() const
+0x0154:  005feb70  CBaseEntity::IsBaseTrain() const
+0x0158:  005feb80  CBaseEntity::IsCombatItem() const
+0x015c:  005feb90  CBaseEntity::IsBaseCombatWeapon() const
+0x0160:  005feba0  CBaseEntity::IsWearable() const
+0x0164:  005febb0  CBaseEntity::MyCombatWeaponPointer()
+0x0168:  005febc0  CBaseEntity::GetServerVehicle()
+0x016c:  009d1510  CBaseEntity::IsViewable()
+0x0170:  00c8c550  CTFPlayer::ChangeTeam(int)
+0x0174:  009d1630  CBaseEntity::OnEntityEvent(EntityEvent_t, void*)
+0x0178:  005ff0e0  CBaseEntity::CanStandOn(CBaseEntity*) const
+0x017c:  005febd0  CBaseEntity::CanStandOn(edict_t*) const
+0x0180:  005fec20  CBaseEntity::GetEnemy()
+0x0184:  005fec30  CBaseEntity::GetEnemy() const
+0x0188:  009d1570  CBaseEntity::Use(CBaseEntity*, CBaseEntity*, USE_TYPE, float)
+0x018c:  009cfa70  CBaseEntity::StartTouch(CBaseEntity*)
+0x0190:  00e023f0  CTFPlayer::Touch(CBaseEntity*)
+0x0194:  009cfb50  CBaseEntity::EndTouch(CBaseEntity*)
+0x0198:  005fec40  CBaseEntity::StartBlocked(CBaseEntity*)
+0x019c:  009cfba0  CBaseEntity::Blocked(CBaseEntity*)
+0x01a0:  005fec50  CBaseEntity::EndBlocked()
+0x01a4:  00b7bd50  CBasePlayer::PhysicsSimulate()
+0x01a8:  00dc06c0  CTFPlayer::UpdateOnRemove()
+0x01ac:  005fec60  CBaseEntity::StopLoopingSounds()
+0x01b0:  009d0450  CBaseEntity::SUB_AllowedToFade()
+0x01b4:  009eb980  CBaseFlex::Teleport(Vector const*, QAngle const*, Vector const*)
+0x01b8:  009cff50  CBaseEntity::NotifySystemEvent(CBaseEntity*, notify_system_event_t, notify_system_event_params_t const&)
+0x01bc:  0063a140  CBasePlayer::MakeTracer(Vector const&, CGameTrace const&, int)
+0x01c0:  0062f6a0  CBaseEntity::GetTracerAttachment()
+0x01c4:  00630f20  CBaseEntity::FireBullets(FireBulletsInfo_t const&)
+0x01c8:  00b625f0  CBasePlayer::DoImpactEffect(CGameTrace&, int)
+0x01cc:  005fec70  CBaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo*)
+0x01d0:  005fec80  CBaseEntity::Respawn()
+0x01d4:  005fec90  CBaseEntity::IsLockedByMaster()
+0x01d8:  00ddbda0  CTFPlayer::GetMaxHealth() const
+0x01dc:  00dda700  CTFPlayer::ModifyOrAppendCriteria(AI_CriteriaSet&)
+0x01e0:  005fecb0  CBaseEntity::NetworkStateChanged_m_iMaxHealth()
+0x01e4:  005fecc0  CBaseEntity::NetworkStateChanged_m_iMaxHealth(void*)
+0x01e8:  009f9500  CBasePlayer::NetworkStateChanged_m_iHealth()
+0x01ec:  009f9d50  CBasePlayer::NetworkStateChanged_m_iHealth(void*)
+0x01f0:  009f9540  CBasePlayer::NetworkStateChanged_m_lifeState()
+0x01f4:  009f9ea0  CBasePlayer::NetworkStateChanged_m_lifeState(void*)
+0x01f8:  005fed10  CBaseEntity::NetworkStateChanged_m_takedamage()
+0x01fc:  005fed20  CBaseEntity::NetworkStateChanged_m_takedamage(void*)
+0x0200:  009cff40  CBaseEntity::GetDamageType() const
+0x0204:  005fed30  CBaseEntity::GetDamage()
+0x0208:  005fed40  CBaseEntity::SetDamage(float)
+0x020c:  00636f40  CBasePlayer::EyePosition()
+0x0210:  00636ba0  CBasePlayer::EyeAngles()
+0x0214:  00636c90  CBasePlayer::LocalEyeAngles()
+0x0218:  0062cbc0  CBaseEntity::EarPosition()
+0x021c:  00b65c90  CBasePlayer::BodyTarget(Vector const&, bool)
+0x0220:  009cf960  CBaseEntity::HeadTarget(Vector const&)
+0x0224:  009d8d00  CBaseEntity::GetVectors(Vector*, Vector*, Vector*) const
+0x0228:  0062cc60  CBaseEntity::GetViewOffset() const
+0x022c:  0062cbf0  CBaseEntity::SetViewOffset(Vector const&)
+0x0230:  00b633c0  CBasePlayer::GetSmoothedVelocity()
+0x0234:  009b5b80  CBaseAnimating::GetVelocity(Vector*, Vector*)
+0x0238:  009c9310  CBaseCombatCharacter::FVisible(CBaseEntity*, int, CBaseEntity**)
+0x023c:  007c9c90  CBaseCombatCharacter::FVisible(Vector const&, int, CBaseEntity**)
+0x0240:  005fed50  CBaseEntity::CanBeSeenBy(CAI_BaseNPC*)
+0x0244:  009d1090  CBaseEntity::GetAttackDamageScale(CBaseEntity*)
+0x0248:  009d0ff0  CBaseEntity::GetReceivedDamageScale(CBaseEntity*)
+0x024c:  005fed60  CBaseEntity::GetGroundVelocityToApply(Vector&)
+0x0250:  005fed90  CBaseEntity::PhysicsSplash(Vector const&, Vector const&, float, float)
+0x0254:  005feda0  CBaseEntity::Splash()
+0x0258:  0062cc70  CBaseEntity::WorldSpaceCenter() const
+0x025c:  009cfdc0  CBaseEntity::GetSoundEmissionOrigin() const
+0x0260:  007e9400  CTFPlayer::ModifyEmitSoundParams(EmitSound_t&)
+0x0264:  00c8c5b0  CTFPlayer::IsDeflectable()
+0x0268:  005fedc0  CBaseEntity::Deflected(CBaseEntity*, Vector&)
+0x026c:  0062ec20  CBaseEntity::CreateVPhysics()
+0x0270:  005fedd0  CBaseEntity::ForceVPhysicsCollide(CBaseEntity*)
+0x0274:  00b62690  CBasePlayer::VPhysicsDestroyObject()
+0x0278:  00b62760  CBasePlayer::VPhysicsUpdate(IPhysicsObject*)
+0x027c:  009d14b0  CBaseEntity::VPhysicsTakeDamage(CTakeDamageInfo const&)
+0x0280:  009c3860  CBaseCombatCharacter::VPhysicsShadowCollision(int, gamevcollisionevent_t*)
+0x0284:  00b7a7d0  CBasePlayer::VPhysicsShadowUpdate(IPhysicsObject*)
+0x0288:  00b61e90  CBasePlayer::VPhysicsCollision(int, gamevcollisionevent_t*)
+0x028c:  009d0eb0  CBaseEntity::VPhysicsFriction(IPhysicsObject*, float, int, int)
+0x0290:  009d9430  CBaseEntity::UpdatePhysicsShadowToCurrentPosition(float)
+0x0294:  009cfc40  CBaseEntity::VPhysicsGetObjectList(IPhysicsObject**, int)
+0x0298:  009cfc70  CBaseEntity::VPhysicsIsFlesh()
+0x029c:  005fedf0  CBaseEntity::HasPhysicsAttacker(float)
+0x02a0:  00b61c50  CBasePlayer::PhysicsSolidMaskForEntity() const
+0x02a4:  006e0c60  CBaseEntity::ResolveFlyCollisionCustom(CGameTrace&, Vector&)
+0x02a8:  00b48790  CBaseEntity::PerformCustomPhysics(Vector*, Vector*, QAngle*, QAngle*)
+0x02ac:  009b0c60  CBaseAnimating::GetStepOrigin() const
+0x02b0:  009b0ca0  CBaseAnimating::GetStepAngles() const
+0x02b4:  005fee00  CBaseEntity::ShouldDrawWaterImpacts()
+0x02b8:  009f9680  CBasePlayer::NetworkStateChanged_m_fFlags()
+0x02bc:  009fa3e0  CBasePlayer::NetworkStateChanged_m_fFlags(void*)
+0x02c0:  009f9400  CBasePlayer::NetworkStateChanged_m_nWaterLevel()
+0x02c4:  009f9810  CBasePlayer::NetworkStateChanged_m_nWaterLevel(void*)
+0x02c8:  009f9580  CBasePlayer::NetworkStateChanged_m_hGroundEntity()
+0x02cc:  009f9ff0  CBasePlayer::NetworkStateChanged_m_hGroundEntity(void*)
+0x02d0:  009f94c0  CBasePlayer::NetworkStateChanged_m_vecBaseVelocity()
+0x02d4:  009f9c00  CBasePlayer::NetworkStateChanged_m_vecBaseVelocity(void*)
+0x02d8:  009f9600  CBasePlayer::NetworkStateChanged_m_flFriction()
+0x02dc:  009fa290  CBasePlayer::NetworkStateChanged_m_flFriction(void*)
+0x02e0:  009f9440  CBasePlayer::NetworkStateChanged_m_vecVelocity()
+0x02e4:  009f9960  CBasePlayer::NetworkStateChanged_m_vecVelocity(void*)
+0x02e8:  009f9640  CBasePlayer::NetworkStateChanged_m_vecViewOffset()
+0x02ec:  009f96c0  CBasePlayer::NetworkStateChanged_m_vecViewOffset(void*)
+0x02f0:  005feef0  CBaseEntity::ShouldBlockNav() const
+0x02f4:  009b0c10  CBaseAnimating::GetIdealSpeed() const
+0x02f8:  009b0c20  CBaseAnimating::GetIdealAccel() const
+0x02fc:  009bdcb0  CBaseAnimatingOverlay::StudioFrameAdvance()
+0x0300:  009b1ee0  CBaseAnimating::SetSequence(int)
+0x0304:  00629710  CBaseAnimating::IsActivityFinished()
+0x0308:  009b34e0  CBaseAnimating::GetSequenceGroundSpeed(CStudioHdr*, int)
+0x030c:  00629720  CBaseAnimating::ClampRagdollForce(Vector const&, Vector*)
+0x0310:  009b1c70  CBaseAnimating::BecomeRagdollOnClient(Vector const&)
+0x0314:  009b0c00  CBaseAnimating::IsRagdoll()
+0x0318:  009b62f0  CBaseAnimating::CanBecomeRagdoll()
+0x031c:  009be160  CBaseAnimatingOverlay::GetSkeleton(CStudioHdr*, Vector*, Quaternion*, int)
+0x0320:  009b84d0  CBaseAnimating::GetBoneTransform(int, matrix3x4_t&)
+0x0324:  009b8f70  CBaseAnimating::SetupBones(matrix3x4_t*, int)
+0x0328:  009b1480  CBaseAnimating::CalculateIKLocks(float)
+0x032c:  009bcb60  CBaseAnimatingOverlay::DispatchAnimEvents(CBaseAnimating*)
+0x0330:  00dc4900  CTFPlayer::HandleAnimEvent(animevent_t*)
+0x0334:  009b0c50  CBaseAnimating::PopulatePoseParameters()
+0x0338:  009b4f10  CBaseAnimating::GetAttachment(int, matrix3x4_t&)
+0x033c:  009b8830  CBaseAnimating::InitBoneControllers()
+0x0340:  009b5e30  CBaseAnimating::GetGroundSpeedVelocity()
+0x0344:  00dc0150  CTFPlayer::RefreshCollisionBounds()
+0x0348:  009b1b00  CBaseAnimating::Ignite(float, bool, float, bool)
+0x034c:  009b0f60  CBaseAnimating::IgniteLifetime(float)
+0x0350:  009b0ea0  CBaseAnimating::IgniteNumHitboxFires(int)
+0x0354:  009b0de0  CBaseAnimating::IgniteHitboxFireScale(float)
+0x0358:  00629c20  CBaseAnimating::Extinguish()
+0x035c:  009c2520  CBaseCombatCharacter::SetLightingOriginRelative(CBaseEntity*)
+0x0360:  00629e00  CBaseAnimating::SetLightingOrigin(CBaseEntity*)
+0x0364:  009ebdb0  CBaseFlex::SetViewtarget(Vector const&)
+0x0368:  009f0620  CBaseFlex::StartSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*, CChoreoActor*, CBaseEntity*)
+0x036c:  009ece20  CBaseFlex::ProcessSceneEvents()
+0x0370:  00dc1200  CTFPlayer::ProcessSceneEvent(CSceneEventInfo*, CChoreoScene*, CChoreoEvent*)
+0x0374:  009eba10  CBaseFlex::ClearSceneEvent(CSceneEventInfo*, bool, bool)
+0x0378:  009ebc20  CBaseFlex::CheckSceneEventCompletion(CSceneEventInfo*, float, CChoreoScene*, CChoreoEvent*)
+0x037c:  00dbfc20  CTFPlayer::PlayScene(char const*, float, AI_Response*, IRecipientFilter*)
+0x0380:  009eb990  CBaseFlex::PlayAutoGeneratedSoundScene(char const*)
+0x0384:  00dda680  CTFPlayer::GetSpecialDSP()
+0x0388:  00b619d0  CBasePlayer::GetPhysicsImpactDamageTable()
+0x038c:  009bf4a0  CBaseCombatCharacter::FInViewCone(CBaseEntity*)
+0x0390:  009bfb00  CBaseCombatCharacter::FInViewCone(Vector const&)
+0x0394:  009bf4e0  CBaseCombatCharacter::FInAimCone(CBaseEntity*)
+0x0398:  009c1420  CBaseCombatCharacter::FInAimCone(Vector const&)
+0x039c:  009bf830  CBaseCombatCharacter::ShouldShootMissTarget(CBaseCombatCharacter*)
+0x03a0:  009c1670  CBaseCombatCharacter::FindMissTarget()
+0x03a4:  009bf560  CBaseCombatCharacter::HandleInteraction(int, void*, CBaseCombatCharacter*)
+0x03a8:  00b61c90  CBasePlayer::BodyAngles()
+0x03ac:  009bf9e0  CBaseCombatCharacter::BodyDirection2D()
+0x03b0:  009bfab0  CBaseCombatCharacter::BodyDirection3D()
+0x03b4:  007c97e0  CBaseCombatCharacter::HeadDirection2D()
+0x03b8:  007c9810  CBaseCombatCharacter::HeadDirection3D()
+0x03bc:  007c9840  CBaseCombatCharacter::EyeDirection2D()
+0x03c0:  007c9870  CBaseCombatCharacter::EyeDirection3D()
+0x03c4:  009c1270  CBaseCombatCharacter::IsHiddenByFog(Vector const&) const
+0x03c8:  009c12e0  CBaseCombatCharacter::IsHiddenByFog(CBaseEntity*) const
+0x03cc:  009bf880  CBaseCombatCharacter::IsHiddenByFog(float) const
+0x03d0:  009c1200  CBaseCombatCharacter::GetFogObscuredRatio(Vector const&) const
+0x03d4:  009c1380  CBaseCombatCharacter::GetFogObscuredRatio(CBaseEntity*) const
+0x03d8:  009bf8b0  CBaseCombatCharacter::GetFogObscuredRatio(float) const
+0x03dc:  0061ea90  CBaseCombatCharacter::IsLookingTowards(CBaseEntity const*, float) const
+0x03e0:  0061eb70  CBaseCombatCharacter::IsLookingTowards(Vector const&, float) const
+0x03e4:  0061ec70  CBaseCombatCharacter::IsInFieldOfView(CBaseEntity*) const
+0x03e8:  0061ef60  CBaseCombatCharacter::IsInFieldOfView(Vector const&) const
+0x03ec:  0061f000  CBaseCombatCharacter::IsLineOfSightClear(CBaseEntity*, CBaseCombatCharacter::LineOfSightCheckType) const
+0x03f0:  0061f0f0  CBaseCombatCharacter::IsLineOfSightClear(Vector const&, CBaseCombatCharacter::LineOfSightCheckType, CBaseEntity*) const
+0x03f4:  00ddc070  CTFPlayer::GiveAmmo(int, int, bool)
+0x03f8:  00dc0c80  CTFPlayer::RemoveAmmo(int, int)
+0x03fc:  00dc03d0  CTFPlayer::RemoveAmmo(int, char const*)
+0x0400:  00dc08a0  CTFPlayer::GetAmmoCount(int) const
+0x0404:  009bf5e0  CBaseCombatCharacter::NPC_TranslateActivity(Activity)
+0x0408:  009bf570  CBaseCombatCharacter::Weapon_TranslateActivity(Activity, bool*)
+0x040c:  00dc0280  CTFPlayer::Weapon_FrameUpdate()
+0x0410:  00dc0200  CTFPlayer::Weapon_HandleAnimEvent(animevent_t*)
+0x0414:  00b61d80  CBasePlayer::Weapon_CanUse(CBaseCombatWeapon*)
+0x0418:  00dcc600  CTFPlayer::Weapon_Equip(CBaseCombatWeapon*)
+0x041c:  009c2fe0  CBaseCombatCharacter::Weapon_EquipAmmoOnly(CBaseCombatWeapon*)
+0x0420:  00dbf0c0  CTFPlayer::Weapon_Drop(CBaseCombatWeapon*, Vector const*, Vector const*)
+0x0424:  007e87f0  CTFPlayer::Weapon_Switch(CBaseCombatWeapon*, int)
+0x0428:  006376a0  CBasePlayer::Weapon_ShootPosition()
+0x042c:  007f0db0  CTFPlayer::Weapon_CanSwitchTo(CBaseCombatWeapon*)
+0x0430:  009bf660  CBaseCombatCharacter::Weapon_SlotOccupied(CBaseCombatWeapon*)
+0x0434:  009bf6b0  CBaseCombatCharacter::Weapon_GetSlot(int) const
+0x0438:  007c98a0  CBaseCombatCharacter::AddPlayerItem(CBaseCombatWeapon*)
+0x043c:  00b71c10  CBasePlayer::RemovePlayerItem(CBaseCombatWeapon*)
+0x0440:  007c98c0  CBaseCombatCharacter::CanBecomeServerRagdoll()
+0x0444:  00dffaa0  CTFPlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
+0x0448:  009bf7d0  CBaseCombatCharacter::OnTakeDamage_Dying(CTakeDamageInfo const&)
+0x044c:  009c1180  CBaseCombatCharacter::OnTakeDamage_Dead(CTakeDamageInfo const&)
+0x0450:  007c9ee0  CBaseCombatCharacter::GetAliveDuration() const
+0x0454:  007c98d0  CBaseCombatCharacter::OnFriendDamaged(CBaseCombatCharacter*, CBaseEntity*)
+0x0458:  007c98e0  CBaseCombatCharacter::NotifyFriendsOfDamage(CBaseEntity*)
+0x045c:  009bf8c0  CBaseCombatCharacter::HasEverBeenInjured(int) const
+0x0460:  009c1050  CBaseCombatCharacter::GetTimeSinceLastInjury(int) const
+0x0464:  007c98f0  CBaseCombatCharacter::OnPlayerKilledOther(CBaseEntity*, CTakeDamageInfo const&)
+0x0468:  009c3440  CBaseCombatCharacter::GetDeathActivity()
+0x046c:  009c0040  CBaseCombatCharacter::CorpseGib(CTakeDamageInfo const&)
+0x0470:  009c2c90  CBaseCombatCharacter::CorpseFade()
+0x0474:  009bf480  CBaseCombatCharacter::HasHumanGibs()
+0x0478:  009bf490  CBaseCombatCharacter::HasAlienGibs()
+0x047c:  00ddc430  CTFPlayer::ShouldGib(CTakeDamageInfo const&)
+0x0480:  007c9910  CBaseCombatCharacter::OnKilledNPC(CBaseCombatCharacter*)
+0x0484:  009bfe30  CBaseCombatCharacter::Event_Gibbed(CTakeDamageInfo const&)
+0x0488:  00b62e30  CBasePlayer::Event_Dying(CTakeDamageInfo const&)
+0x048c:  009bfc70  CBaseCombatCharacter::Event_Dying()
+0x0490:  009c1860  CBaseCombatCharacter::BecomeRagdoll(CTakeDamageInfo const&, Vector const&)
+0x0494:  009c2720  CBaseCombatCharacter::FixupBurningServerRagdoll(CBaseEntity*)
+0x0498:  009bfcb0  CBaseCombatCharacter::BecomeRagdollBoogie(CBaseEntity*, Vector const&, float, int)
+0x049c:  009c2310  CBaseCombatCharacter::CheckTraceHullAttack(float, Vector const&, Vector const&, int, int, float, bool)
+0x04a0:  009c1a20  CBaseCombatCharacter::CheckTraceHullAttack(Vector const&, Vector const&, Vector const&, Vector const&, int, int, float, bool)
+0x04a4:  007c9930  CBaseCombatCharacter::PushawayTouch(CBaseEntity*)
+0x04a8:  009c4db0  CBaseCombatCharacter::IRelationType(CBaseEntity*)
+0x04ac:  009c4d80  CBaseCombatCharacter::IRelationPriority(CBaseEntity*)
+0x04b0:  009f9020  CBasePlayer::IsInAVehicle() const
+0x04b4:  009f8f90  CBasePlayer::GetVehicle()
+0x04b8:  009f8fe0  CBasePlayer::GetVehicleEntity()
+0x04bc:  007c9970  CBaseCombatCharacter::ExitVehicle()
+0x04c0:  00dbfa80  CTFPlayer::RemoveAllWeapons()
+0x04c4:  009bf820  CBaseCombatCharacter::CalcWeaponProficiency(CBaseCombatWeapon*)
+0x04c8:  009c00f0  CBaseCombatCharacter::GetAttackSpread(CBaseCombatWeapon*, CBaseEntity*)
+0x04cc:  009bf7f0  CBaseCombatCharacter::GetSpreadBias(CBaseCombatWeapon*, CBaseEntity*)
+0x04d0:  0063a060  CBasePlayer::DoMuzzleFlash()
+0x04d4:  009c9870  CBaseCombatCharacter::AddEntityRelationship(CBaseEntity*, Disposition_t, int)
+0x04d8:  009c0d30  CBaseCombatCharacter::RemoveEntityRelationship(CBaseEntity*)
+0x04dc:  009c99e0  CBaseCombatCharacter::AddClassRelationship(Class_T, Disposition_t, int)
+0x04e0:  007c9980  CBaseCombatCharacter::OnChangeActiveWeapon(CBaseCombatWeapon*, CBaseCombatWeapon*)
+0x04e4:  007c9990  CBaseCombatCharacter::GetLastKnownArea() const
+0x04e8:  009bf990  CBaseCombatCharacter::IsAreaTraversable(CNavArea const*) const
+0x04ec:  009bf8f0  CBaseCombatCharacter::ClearLastKnownArea()
+0x04f0:  009c2060  CBaseCombatCharacter::UpdateLastKnownArea()
+0x04f4:  00def460  CTFPlayer::OnNavAreaChanged(CNavArea*, CNavArea*)
+0x04f8:  009c0010  CBaseCombatCharacter::OnNavAreaRemoved(CNavArea*)
+0x04fc:  007c99b0  CBaseCombatCharacter::OnPursuedBy(INextBot*)
+0x0500:  009f95c0  CBasePlayer::NetworkStateChanged_m_iAmmo()
+0x0504:  009fa140  CBasePlayer::NetworkStateChanged_m_iAmmo(void*)
+0x0508:  00dc42a0  CTFPlayer::CreateViewModel(int)
+0x050c:  00dc0610  CTFPlayer::SetupVisibility(CBaseEntity*, unsigned char*, int)
+0x0510:  00dc2c40  CTFPlayer::WantsLagCompensationOnEntity(CBasePlayer const*, CUserCmd const*, CBitVec<2048> const*) const
+0x0514:  0063a1c0  CBasePlayer::SharedSpawn()
+0x0518:  00dd4f90  CTFPlayer::ForceRespawn()
+0x051c:  00dcddf0  CTFPlayer::InitialSpawn()
+0x0520:  009f8c90  CBasePlayer::InitHUD()
+0x0524:  00b649a0  CBasePlayer::ShowViewPortPanel(char const*, bool, KeyValues*)
+0x0528:  00dcc2b0  CTFPlayer::PlayerDeathThink()
+0x052c:  00b61c30  CBasePlayer::Jump()
+0x0530:  00b63390  CBasePlayer::Duck()
+0x0534:  00dee3e0  CTFPlayer::PreThink()
+0x0538:  00dfd9e0  CTFPlayer::PostThink()
+0x053c:  00dc0450  CTFPlayer::DamageEffect(float, int)
+0x0540:  00c8c5a0  CTFPlayer::OnDamagedByExplosion(CTakeDamageInfo const&)
+0x0544:  009f8ca0  CBasePlayer::ShouldFadeOnDeath()
+0x0548:  00b61ef0  CBasePlayer::IsFakeClient() const
+0x054c:  00636ca0  CBasePlayer::GetPlayerMins() const
+0x0550:  00636db0  CBasePlayer::GetPlayerMaxs() const
+0x0554:  00639ca0  CBasePlayer::CalcRoll(QAngle const&, Vector const&, float, float)
+0x0558:  00b627c0  CBasePlayer::PackDeadPlayerItems()
+0x055c:  00dc3950  CTFPlayer::RemoveAllItems(bool)
+0x0560:  00637700  CBasePlayer::Weapon_SetLast(CBaseCombatWeapon*)
+0x0564:  007e8700  CTFPlayer::Weapon_ShouldSetLast(CBaseCombatWeapon*, CBaseCombatWeapon*)
+0x0568:  00637a10  CBasePlayer::Weapon_ShouldSelectItem(CBaseCombatWeapon*)
+0x056c:  00def300  CTFPlayer::OnMyWeaponFired(CBaseCombatWeapon*)
+0x0570:  009f9300  CBasePlayer::GetTimeSinceWeaponFired() const
+0x0574:  009f9360  CBasePlayer::IsFiringWeapon() const
+0x0578:  00b65840  CBasePlayer::UpdateClientData()
+0x057c:  009f8ce0  CBasePlayer::ExitLadder()
+0x0580:  00637130  CBasePlayer::GetLadderSurface(Vector const&)
+0x0584:  009f8cf0  CBasePlayer::SetFlashlightEnabled(bool)
+0x0588:  00dbf000  CTFPlayer::FlashlightIsOn()
+0x058c:  00dc0760  CTFPlayer::FlashlightTurnOn()
+0x0590:  00dc4740  CTFPlayer::FlashlightTurnOff()
+0x0594:  009f8d30  CBasePlayer::IsIlluminatedByFlashlight(CBaseEntity*, float*)
+0x0598:  00637170  CBasePlayer::UpdateStepSound(surfacedata_t*, Vector const&, Vector const&)
+0x059c:  0063afe0  CBasePlayer::PlayStepSound(Vector&, surfacedata_t*, float, bool)
+0x05a0:  007f12b0  CTFPlayer::GetOverrideStepSound(char const*)
+0x05a4:  007ee6d0  CTFPlayer::GetStepSoundVelocities(float*, float*)
+0x05a8:  007e92d0  CTFPlayer::SetStepSoundTime(stepsoundtimes_t, bool)
+0x05ac:  00de5a60  CTFPlayer::DeathSound(CTakeDamageInfo const&)
+0x05b0:  00dc0c20  CTFPlayer::GetSceneSoundToken()
+0x05b4:  007f29f0  CTFPlayer::OnEmitFootstepSound(CSoundParameters const&, Vector const&, float)
+0x05b8:  00dbf0b0  CTFPlayer::SetAnimation(PLAYER_ANIM)
+0x05bc:  00b6e600  CBasePlayer::ImpulseCommands()
+0x05c0:  00dc16a0  CTFPlayer::CheatImpulseCommands(int)
+0x05c4:  00df20e0  CTFPlayer::ClientCommand(CCommand const&)
+0x05c8:  00b6c340  CBasePlayer::StartObserverMode(int)
+0x05cc:  00b67320  CBasePlayer::StopObserverMode()
+0x05d0:  00c8c580  CTFPlayer::ModeWantsSpectatorGUI(int)
+0x05d4:  00dd9890  CTFPlayer::SetObserverMode(int)
+0x05d8:  00b619e0  CBasePlayer::GetObserverMode()
+0x05dc:  00dc2860  CTFPlayer::SetObserverTarget(CBaseEntity*)
+0x05e0:  00b63c60  CBasePlayer::ObserverUse(bool)
+0x05e4:  00b61b10  CBasePlayer::GetObserverTarget()
+0x05e8:  00dbf0e0  CTFPlayer::FindNextObserverTarget(bool)
+0x05ec:  00df93b0  CTFPlayer::GetNextObserverSearchStartPoint(bool)
+0x05f0:  00dd9db0  CTFPlayer::IsValidObserverTarget(CBaseEntity*)
+0x05f4:  00dda110  CTFPlayer::CheckObserverSettings()
+0x05f8:  00b62b90  CBasePlayer::JumptoPosition(Vector const&, QAngle const&)
+0x05fc:  00b619f0  CBasePlayer::ForceObserverMode(int)
+0x0600:  00639660  CBasePlayer::ResetObserverMode()
+0x0604:  00dd26d0  CTFPlayer::ValidateCurrentObserverTarget()
+0x0608:  00dbf050  CTFPlayer::AttemptToExitFreezeCam()
+0x060c:  00b61a80  CBasePlayer::StartReplayMode(float, float, int)
+0x0610:  00b61ad0  CBasePlayer::StopReplayMode()
+0x0614:  00b63320  CBasePlayer::GetDelayTicks()
+0x0618:  00b61b00  CBasePlayer::GetReplayEntity()
+0x061c:  009f8d80  CBasePlayer::CreateCorpse()
+0x0620:  00dcacd0  CTFPlayer::EntSelectSpawnPoint()
+0x0624:  00b6dee0  CBasePlayer::GetInVehicle(IServerVehicle*, int)
+0x0628:  00b6fe30  CBasePlayer::LeaveVehicle(Vector const&, QAngle const&)
+0x062c:  009f8d90  CBasePlayer::OnVehicleStart()
+0x0630:  009f8da0  CBasePlayer::OnVehicleEnd(Vector&)
+0x0634:  00dc1510  CTFPlayer::BumpWeapon(CBaseCombatWeapon*)
+0x0638:  00637840  CBasePlayer::SelectLastItem()
+0x063c:  007e8750  CTFPlayer::SelectItem(char const*, int)
+0x0640:  007e8390  CTFPlayer::ItemPostFrame()
+0x0644:  00b68110  CBasePlayer::GiveNamedItem(char const*, int)
+0x0648:  00b64c30  CBasePlayer::CheckTrainUpdate()
+0x064c:  0063ac40  CBasePlayer::SetPlayerUnderwater(bool)
+0x0650:  00dda620  CTFPlayer::CanBreatheUnderwater() const
+0x0654:  00dbfa40  CTFPlayer::PlayerUse()
+0x0658:  009f8dc0  CBasePlayer::PlayUseDenySound()
+0x065c:  00637b60  CBasePlayer::FindUseEntity()
+0x0660:  00b61be0  CBasePlayer::IsUseableEntity(CBaseEntity*, unsigned int)
+0x0664:  009f8dd0  CBasePlayer::PickupObject(CBaseEntity*, bool)
+0x0668:  009f8de0  CBasePlayer::ForceDropOfCarriedPhysObjects(CBaseEntity*)
+0x066c:  00b61c20  CBasePlayer::GetHeldObjectMass(IPhysicsObject*)
+0x0670:  00b64ad0  CBasePlayer::UpdateGeigerCounter()
+0x0674:  00b61cd0  CBasePlayer::GetAutoaimVector(float)
+0x0678:  00b61d30  CBasePlayer::GetAutoaimVector(float, float)
+0x067c:  00b71570  CBasePlayer::GetAutoaimVector(autoaim_params_t&)
+0x0680:  00b63450  CBasePlayer::ShouldAutoaim()
+0x0684:  00b62b40  CBasePlayer::ForceClientDllUpdate()
+0x0688:  00b7c810  CBasePlayer::ProcessUsercmds(CUserCmd*, int, int, int, bool)
+0x068c:  00dd3d90  CTFPlayer::PlayerRunCommand(CUserCmd*, IMoveHelper*)
+0x0690:  00ded410  CTFPlayer::ChangeTeam(int, bool, bool)
+0x0694:  00dc0ad0  CTFPlayer::CanHearAndReadChatFrom(CBasePlayer*)
+0x0698:  009f9070  CBaseMultiplayerPlayer::CanSpeak()
+0x069c:  00b647d0  CBasePlayer::ModifyOrAppendPlayerCriteria(AI_CriteriaSet&)
+0x06a0:  009f8e30  CBasePlayer::CheckChatText(char*, int)
+0x06a4:  00dd1320  CTFPlayer::CreateRagdollEntity()
+0x06a8:  00dbfb90  CTFPlayer::ShouldAnnounceAchievement()
+0x06ac:  00b7cb10  CBasePlayer::EquipWearable(CEconWearable*)
+0x06b0:  00b79450  CBasePlayer::RemoveWearable(CEconWearable*)
+0x06b4:  009f8e50  CBasePlayer::IsFollowingPhysics()
+0x06b8:  00b743a0  CBasePlayer::InitVCollision(Vector const&, Vector const&)
+0x06bc:  00b6d070  CBasePlayer::UpdatePhysicsShadowToCurrentPosition()
+0x06c0:  009f8e60  CBasePlayer::Hints()
+0x06c4:  00dc0910  CTFPlayer::IsReadyToPlay()
+0x06c8:  00dc1080  CTFPlayer::IsReadyToSpawn()
+0x06cc:  00dbf020  CTFPlayer::ShouldGainInstantSpawn()
+0x06d0:  00dc14b0  CTFPlayer::ResetPerRoundStats()
+0x06d4:  00dc8ce0  CTFPlayer::ResetScores()
+0x06d8:  00b61f10  CBasePlayer::EquipSuit(bool)
+0x06dc:  00b61f50  CBasePlayer::RemoveSuit()
+0x06e0:  00636a30  CBasePlayer::GetPlayerMaxSpeed()
+0x06e4:  00dc09e0  CTFPlayer::CommitSuicide(bool, bool)
+0x06e8:  00b65660  CBasePlayer::CommitSuicide(Vector const&, bool, bool)
+0x06ec:  00b61ed0  CBasePlayer::IsBot() const
+0x06f0:  009f8f30  CBasePlayer::IsBotOfType(int) const
+0x06f4:  009f8f80  CBasePlayer::GetBotType() const
+0x06f8:  009f90c0  CBaseMultiplayerPlayer::GetExpresser()
+0x06fc:  00dc2990  CTFPlayer::Internal_HandleMapEvent(inputdata_t&)
+0x0700:  009f8ed0  CBasePlayer::SpawnArmorValue() const
+0x0704:  009f8ee0  CBasePlayer::NetworkStateChanged_m_ArmorValue()
+0x0708:  009f8ef0  CBasePlayer::NetworkStateChanged_m_ArmorValue(void*)
+0x070c:  009f8f00  CBasePlayer::HasHaptics()
+0x0710:  009f8f10  CBasePlayer::SetHaptics(bool)
+0x0714:  00b61ea0  CBasePlayer::PlayerSolidMask(bool) const
+0x0718:  009f9160  CAI_ExpresserHost<CBasePlayer>::NoteSpeaking(float, float)
+0x071c:  009f91a0  CAI_ExpresserHost<CBasePlayer>::Speak(char const*, char const*, char*, unsigned int, IRecipientFilter*)
+0x0720:  009f9130  CAI_ExpresserHost<CBasePlayer>::PostSpeakDispatchResponse(char const*, AI_Response&)
+0x0724:  009f8470  CBaseMultiplayerPlayer::SpeakIfAllowed(char const*, char const*, char*, unsigned int, IRecipientFilter*)
+0x0728:  00de02f0  CTFPlayer::SpeakConceptIfAllowed(int, char const*, char*, unsigned int, IRecipientFilter*)
+0x072c:  00dc0130  CTFPlayer::CanBeAutobalanced()
+0x0730:  00dbf1b0  CTFPlayer::CanSpeakVoiceCommand()
+0x0734:  00dc00c0  CTFPlayer::ShouldShowVoiceSubtitleToEnemy()
+0x0738:  00dbf6d0  CTFPlayer::NoteSpokeVoiceCommand(char const*)
+0x073c:  00dbf220  CTFPlayer::OnAchievementEarned(int)
+0x0740:  009f90d0  CBaseMultiplayerPlayer::GetMultiplayerExpresser()
+0x0744:  00dbffa0  CTFPlayer::CalculateTeamBalanceScore()
+0x0748:  009f8400  CBaseMultiplayerPlayer::CreateExpresser()
+0x074c:  00dc2490  CTFPlayer::DetermineAssistForKill(CTakeDamageInfo const&)
+0x0750:  00c8c510  CTFPlayer::SetNumberofDominations(int)
+0x0754:  00c8c540  CTFPlayer::GetNumberofDominations()
+0x0758:  007f1830  CTFPlayer::IsAllowedToPickUpFlag() const
+0x075c:  00c8c5d0  CTFPlayer::GetAttributeManager()
+0x0760:  00c8c5f0  CTFPlayer::GetAttributeContainer()
+0x0764:  00c8c610  CTFPlayer::GetAttributeOwner()
+0x0768:  00c8c630  CTFPlayer::GetAttributeList()
+0x076c:  00c8c650  CTFPlayer::ReapplyProvision()
+0x0770:  00dbf1e0  CTFPlayer::InventoryUpdated(CPlayerInventory*)
+0x0774:  00c8c660  CTFPlayer::SOCacheUnsubscribed(CSteamID const&)
+0x0778:  00dc3e90  CTFPlayer::GiveNamedItem(char const*, int, CEconItemView const*, bool)
+0x077c:  00dbf610  CTFPlayer::GetAllowedTauntPartnerTeam() const
+0x0780:  00df45c0  CTFPlayer::InitClass()
+0x0784:  ffffef00  (unknown)
+0x0788:  0120b360  typeinfo for CTFPlayer
+0x078c:  008dc560  CAI_ExpresserSink::OnSpokeConcept(char const*, AI_Response*)
+0x0790:  008dc570  CAI_ExpresserSink::OnStartSpeaking()
+0x0794:  008dc580  CAI_ExpresserSink::UseSemaphore()
+0x0798:  ffffeeb4  (unknown)
+0x079c:  0120b360  typeinfo for CTFPlayer
+0x07a0:  00c8c5c0  non-virtual thunk to CTFPlayer::GetAttributeManager()
+0x07a4:  00c8c5e0  non-virtual thunk to CTFPlayer::GetAttributeContainer()
+0x07a8:  00c8c600  non-virtual thunk to CTFPlayer::GetAttributeOwner()
+0x07ac:  00c8c620  non-virtual thunk to CTFPlayer::GetAttributeList()
+0x07b0:  00c8c640  non-virtual thunk to CTFPlayer::ReapplyProvision()
+0x07b4:  ffffeeb0  (unknown)
+0x07b8:  0120b360  typeinfo for CTFPlayer
+0x07bc:  00c8c450  IInventoryUpdateListener::SOCreated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
+0x07c0:  00c8c470  IInventoryUpdateListener::PreSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
+0x07c4:  00c8c480  IInventoryUpdateListener::SOUpdated(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
+0x07c8:  00c8c490  IInventoryUpdateListener::PostSOUpdate(CSteamID const&, GCSDK::ESOCacheEvent)
+0x07cc:  00c8c4b0  IInventoryUpdateListener::SODestroyed(CSteamID const&, GCSDK::CSharedObject const*, GCSDK::ESOCacheEvent)
+0x07d0:  00c8c4d0  IInventoryUpdateListener::SOCacheSubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
+0x07d4:  00c8c4f0  IInventoryUpdateListener::SOCacheUnsubscribed(CSteamID const&, GCSDK::ESOCacheEvent)
+0x07d8:  00dbf1d0  non-virtual thunk to CTFPlayer::InventoryUpdated(CPlayerInventory*)
