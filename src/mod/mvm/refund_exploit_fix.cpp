#include "mod.h"
#include "stub/populators.h"
#include "stub/tfplayer.h"
#include "util/scope.h"


// TODO: test this


namespace Mod::MvM::Refund_Exploit_Fix
{
	/* works the same way as
	 * CPopulationManager::IsPlayerBeingTrackedForBuybacks */
	bool IsPlayerBeingTrackedForRespecs(CTFPlayer *player)
	{
		if (player == nullptr) return false;
		
		CSteamID id;
		if (!player->GetSteamID(&id)) return false;
		
		return g_pPopulationManager->m_RespecPoints->IsValidIndex(g_pPopulationManager->m_RespecPoints->Find(id.ConvertToUint64()));
	}
	
	
	RefCount rc_GetAutoTeam;
	DETOUR_DECL_MEMBER(int, CTFPlayer_GetAutoTeam, int team)
	{
		SCOPED_INCREMENT(rc_GetAutoTeam);
		return DETOUR_MEMBER_CALL(CTFPlayer_GetAutoTeam)(team);
	}
	
	DETOUR_DECL_MEMBER(void, CPopulationManager_SetNumRespecsForPlayer, CTFPlayer *player, int num)
	{
		/* only set the respec points if the player is NOT tracked yet */
		if (rc_GetAutoTeam > 0 && IsPlayerBeingTrackedForRespecs(player)) {
			return;
		}
		
		DETOUR_MEMBER_CALL(CPopulationManager_SetNumRespecsForPlayer)(player, num);
	}
	
	
	class CMod : public IMod
	{
	public:
		CMod() : IMod("MvM:Refund_Exploit_Fix")
		{
			MOD_ADD_DETOUR_MEMBER(CTFPlayer_GetAutoTeam,                     "CTFPlayer::GetAutoTeam");
			MOD_ADD_DETOUR_MEMBER(CPopulationManager_SetNumRespecsForPlayer, "CPopulationManager::SetNumRespecsForPlayer");
		}
	};
	CMod s_Mod;
	
	
	ConVar cvar_enable("sig_mvm_refund_exploit_fix", "0", FCVAR_NOTIFY,
		"Mod: fix the infinite refund exploit involving switching to auto team",
		[](IConVar *pConVar, const char *pOldValue, float flOldValue){
			s_Mod.Toggle(static_cast<ConVar *>(pConVar)->GetBool());
		});
}
